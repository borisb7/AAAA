------=============================================================================================
------=============================================================================================
----* DEVIL PUBG PC MACRO
----* CREATED BY DEVILSOFTWARES (DEVIL_KRISHNA#4982)
----* UPDATED VERSION 11.0
----* CHECKOUT NEW PRODUCTS : https://devilsoftwares.com/
----* JOIN OUR DISCORD SERVER : https://discord.gg/DjXvuFXAkY
------=============================================================================================------
------=============================================================================================------


------********************************** INSTRUCTIONS ***************************************------

---- * First You need to Set ADS on HOLD (IN GAME SETTINGS) 

---- * You need to Hold 'Right Click' when you fire after activate gun's macro.

---- * When you 'ON' macro then your keyboard NumLock light will be 'ON' Automatic.

---- * CAPSLOCK = When you use SCOPE Then your keyboard CAPSLOCK light should be 'ON' Otherwise 'OFF' it.

---- * SCROLL LOCK = When You Have Attachments Then your keyboard SCROLL LOCK light should be 'ON' Otherwise 'OFF' it.

---- * NOTE- * WHEN YOU USE GUN WITH ATTACHMENTS & SCOPE THEN SHOULD BE 'ON' Both Capslock & ScrollLock.

---- * When you Fire in Crouch then you need to hold 'LEFT CTRL' Button.

---- * When you Fire in Crouch with holdbreath then you need to hold 'LEFT CTRL' & 'LEFT SHIFT' Button.

---- * When you Fire with holdbreath then you need to hold 'LEFT SHIFT' Button.

---- * When you use RapidFire Set Weapon SingleShot otherwise recoil not work properly. (Rapid Fire Only Work until you not leave Right Click.) 

------********************************** INSTRUCTIONS ***************************************------



------=============================================================================================
--> SET MOUSE  BUTTONS <--
------=============================================================================================

local FAMAS = nil
local M416 = nil
local SCAR_L = nil
local G36C = nil
local AKM =  nil
local BERYL =  nil
local AUG =  5		-- UPDATED
local GROZA =  nil
local MG3 = nil
local UMP9 = nil
local TOMMY = nil
local BIZON = nil
local UZI = nil
local MP5K = nil
local P90 = nil
local Vector = nil
local K2 = nil
local ACE32 = nil
local MP9 = nil

---> RAPID FIRE WEAPONS
local M164A = nil		-- UPDATED
local MUTANT = nil		-- UPDATED

------=============================================================================================------
--> USE THIS IF YOU HAVE LOGITECH G-KEYBOARD OTHERWISE DON'T TOUCH <--
------=============================================================================================------

local FAMAS_gk = nil
local M416_gk = nil
local SCAR_L_gk = nil
local G36C_gk = nil
local AKM_gk = nil
local BERYL_gk = nil
local AUG_gk = nil		-- UPDATED
local GROZA_gk = nil
local MG3_gk = nil
local UMP9_gk = nil
local TOMMY_gk = nil
local BIZON_gk = nil
local MP5K_gk = nil
local UZI_gk = nil
local P90_gk = nil
local Vector_gk = nil
local K2_gk = nil
local ACE32_gk = nil
local MP9_gk = nil

---> RAPID FIRE WEAPONS
local M164A_gk = nil		-- UPDATED
local MUTANT_gk = nil		-- UPDATED

------=============================================================================================------
------=============================================================================================------

local Lighton_key = "numlock"
local ScopeMode = "capslock"
local CrouchMode = "lctrl"
local HoldBreathMode = "lshift"
local AttachmentsMode = "scrolllock"
local WeaponRecoil = false
local CurrentWeapon = 0

------=============================================================================================------
---> FUNCTIONS
------=============================================================================================------
function FAMAS_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {01, 08}, {01, 07},
                               {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {01, 07}, {00, 08}, {00, 07},
                               {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {01, 08}, {00, 07},
                               {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {01, 02},
                               {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {01, 02}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {01, 03}, {00, 04}, {01, 04}, {00, 04}, {01, 04}, {00, 05}, {01, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {01, 06}, {01, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {01, 06}, {01, 05}, {01, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {01, 06}, {01, 05}, {01, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {01, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {01, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 11}, {01, 12}, {01, 11}, {00, 12}, {01, 11}, {00, 11}, {00, 12},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 12}, {00, 11}, {00, 11}, {00, 12}, {00, 11}, {00, 11}, {00, 12},
                               {00, 11}, {00, 11}, {00, 12}, {01, 11}, {01, 11}, {00, 12}, {00, 11}, {00, 11}, {00, 12},
                               {00, 12}, {01, 11}, {01, 12}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04}, {01, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {01, 05}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {01, 06}, {01, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {01, 07}, {01, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {01, 08}, {01, 07}, {01, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {01, 07}, {01, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {01, 07}, {01, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {01, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 08}, {01, 09}, {01, 08}, {00, 09}, {01, 08},
                               {00, 09}, {00, 08}, {01, 09}, {00, 08}, {01, 09}, {01, 08}, {01, 09}, {00, 08}, {00, 09},
                               {01, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 16}, {00, 16}, {00, 16},
                               {01, 17}, {01, 16}, {00, 17}, {01, 16}, {00, 17}, {00, 16}, {01, 17}, {01, 16}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {01, 17}, {01, 17}, {01, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {01, 17}, {01, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {01, 17}, {01, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {01, 17}, {01, 17}, {01, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 16}, {00, 17}, {01, 16}, {01, 17}, {00, 16},
                               {00, 17}, {00, 16}, {00, 17}, {00, 16}, {01, 17}, {01, 16}, {01, 17}, {00, 16}, {00, 17},
                               {00, 16}, {00, 16}, {01, 16}, {01, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {01, 17}, {01, 18}, {00, 17}, {00, 18},
                               {00, 18}, {00, 18}, {00, 18}, {01, 18}, {01, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},
                               {00, 18}, {00, 18}, {00, 18}, {01, 18}, {01, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},
                               {00, 18}, {01, 18}, {01, 18}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {00, 08}, {00, 08},
                               {01, 08}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 12}, {00, 11}, {00, 11},
                               {01, 13}, {01, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12}, {01, 13}, {01, 12}, {00, 13},
                               {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {01, 12}, {01, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 12}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {01, 13}, {01, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {01, 03},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {01, 04}, {00, 03}, {00, 03},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 05}, {00, 04},
                               {00, 06}, {00, 05}, {00, 06}, {00, 06}, {01, 05}, {01, 06}, {01, 05}, {01, 05}, {01, 06},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 04}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {01, 05}, {01, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 05}, {00, 06}, {00, 06}, {01, 06}, {01, 05}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 05}, {01, 06}, {01, 05}, {01, 06}, {01, 05}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 06}, {01, 06}, {01, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 02}, {00, 02}, {00, 04}, {00, 04}, {01, 02}, {00, 04}, {00, 02}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 05},
                               {00, 03}, {00, 04}, {00, 04}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 05},
                               {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 05},
                               {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 05},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 03}, {00, 04}, {00, 05},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 03}, {00, 04}, {00, 05},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 05}, {00, 04}, {00, 03}, {00, 04}, {00, 05},
                               {00, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 05}, {00, 04}, {00, 03}, {00, 04}, {00, 05},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 03}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 05}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 05}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04}, {01, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {01, 05}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {01, 06}, {01, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {01, 08}, {01, 08}, {01, 08},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {01, 08}, {01, 07}, {01, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {01, 07}, {01, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {01, 07}, {01, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 03}, {00, 04}, {00, 04}, {01, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {01, 06}, {01, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {01, 06}, {01, 05}, {01, 06}, {00, 05},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06},
                               {00, 05}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {01, 06}, {01, 07}, {01, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {01, 07}, {01, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {01, 06}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 08},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09},
                               {01, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {01, 11}, {01, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {01, 12},
                               {00, 11}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 13}, {01, 12},
                               {00, 13}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 14}, {00, 14}, {01, 14}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {01, 14}, {01, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {01, 14}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {01, 14}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 15},
                               {00, 14}, {01, 15}, {01, 15}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function FAMAS_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06},
                               {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {01, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {01, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------
function ACE32_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 09}, {01, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 10}, {00, 09}, {01, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10},
                               {00, 09}, {01, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 10}, {01, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07},
                               {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 10}, {00, 10}, {00, 10}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {01, 12}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 06},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13},
                               {00, 13}, {01, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13},
                               {00, 13}, {00, 13}, {01, 13}, {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16},
                               {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15},
                               {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 17},
                               {00, 17}, {00, 18}, {01, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {01, 18},
                               {00, 18}, {00, 18}, {01, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {01, 18}, {00, 18},
                               {00, 18}, {01, 18}, {00, 18}, {00, 18}, {00, 19}, {00, 18}, {00, 19}, {01, 18}, {00, 19},
                               {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19},
                               {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19},
                               {00, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19},
                               {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20},
                               {00, 21}, {00, 20}, {00, 21}, {00, 20}, {00, 21}, {01, 20}, {00, 21}, {00, 20}, {00, 21},
                               {01, 20}, {00, 21}, {00, 20}, {00, 21}, {01, 20}, {00, 21}, {00, 20}, {00, 21}, {00, 20},
                               {00, 21}, {01, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21}, {00, 20}, {01, 21},
                               {00, 20}, {00, 21}, {01, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21}, {00, 20},
                               {01, 21}, {00, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21},
                               {00, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21}, {00, 20}, {00, 21}, {01, 20},
                               {00, 21}, {00, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21}, {00, 20}, {00, 21},
                               {00, 21}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09},
                               {00, 10}, {01, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10},
                               {00, 09}, {00, 10}, {01, 09}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 13}, {00, 13}, {01, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {01, 14},
                               {00, 13}, {00, 14}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {01, 14}, {00, 13},
                               {00, 14}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07},
                               {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 05}, {00, 03}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {01, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10},
                               {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11},
                               {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------

function M164A_B()
    local RCm = 1
	RC_TABLE = {
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },

}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)
			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_BC()
    local RCm = 1
	RC_TABLE = {
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)
			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_HB()
    local RCm = 1
	RC_TABLE = {
	     { x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_HBC()
    local RCm = 1
	RC_TABLE = {
	    { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_S()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 20*RCm },
        { x = 00*RCm, y = 19*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 22*RCm },
        { x = 00*RCm, y = 23*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },
        { x = 00*RCm, y = 24*RCm },

	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_SC()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_AB()
    local RCm = 1
	RC_TABLE = {
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)
			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_ABC()
    local RCm = 1
	RC_TABLE = {
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)
			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_AHB()
    local RCm = 1
	RC_TABLE = {
	     { x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },

	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_AHBC()
    local RCm = 1
	RC_TABLE = {
	    { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 08*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_AS()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function M164A_ASC()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end



function MUTANT_B()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function MUTANT_BC()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 11*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function MUTANT_HB()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 18*RCm },
        { x = 00*RCm, y = 18*RCm },
        { x = 00*RCm, y = 18*RCm },

	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function MUTANT_HBC()
    local RCm = 1
	RC_TABLE = {
	    { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function MUTANT_S()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 17*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
        { x = 00*RCm, y = 16*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function MUTANT_SC()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 08*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 14*RCm },

	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function MUTANT_AB()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(9)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function MUTANT_ABC()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 02*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(9)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end


function MUTANT_AHB()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 07*RCm },
        { x = 00*RCm, y = 06*RCm },
        
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(9)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end


function MUTANT_AHBC()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 03*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 04*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 05*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        { x = 00*RCm, y = 06*RCm },
        
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(9)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function MUTANT_AS()
    local RCm = 1
	RC_TABLE = {
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 10*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
        { x = 00*RCm, y = 15*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

function MUTANT_ASC()
    local RCm = 1
	RC_TABLE = {
	    { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 09*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 11*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 12*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
        { x = 00*RCm, y = 13*RCm },
	}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(1)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if IsMouseButtonPressed(3)then
				PressAndReleaseMouseButton(1)
				MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(18)

			else
				LastIndex = i
				break
			end
			i = i + 1
		end
	end
end

---===========================================================================================================

------=============================================================================================------

function K2_B()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {01, 4}, {01, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7},
                               {00, 8}, {00, 7}, {00, 8}, {00, 7}, {00, 8}, {00, 7}, {00, 8}, {00, 7}, {00, 8}, {00, 7},
                               {00, 8}, {00, 7}, {00, 8}, {00, 7}, {00, 8}, {00, 7}, {00, 8}, {00, 7}, {00, 8}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 6}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_BC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {01, 3}, {01, 3}, {00, 3}, {00, 3},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_HB()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {01, 5}, {01, 5}, {00, 5}, {00, 5},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 8}, {00, 8}, {00, 8}, {00, 8}, {00, 8}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9},
                               {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}, {00, 9}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_HBC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {01, 4}, {01, 4}, {00, 4}, {00, 4},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 6}, {00, 7},
                               {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7},
                               {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7},
                               {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7},
                               {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7},
                               {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7},
                               {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7},
                               {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7},
                               {00, 6}, {00, 7}, {00, 6}, {00, 7}, {00, 6}, {00, 7}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_S()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 15}, {00, 12}, {00, 15},
                               {00, 12}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 15}, {00, 13}, {00, 13},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 15}, {00, 15},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15},
                               {00, 16}, {00, 15}, {00, 16}, {01, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {01, 16}, {00, 15},
                               {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {0, 16}, {00, 16}, {00, 16}, {00, 15},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {0, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_SC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 09}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 09}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {0, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {0, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {01, 3}, {01, 3}, {00, 3}, {00, 3},
                               {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 2}, {00, 2}, {00, 2}, {00, 2}, {00, 2}, {00, 2}, {01, 2}, {01, 2}, {00, 2}, {00, 3},
                               {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3},
                               {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3},
                               {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3},
                               {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3},
                               {00, 3}, {00, 3}, {00, 3}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 4}, {01, 4}, {01, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6},
                               {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 6}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7},
                               {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}, {00, 7}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {00, 3}, {01, 3}, {01, 3}, {00, 3}, {00, 3},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4},
                               {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 4}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5},
                               {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 5}, {00, 6}, {00, 5},
                               {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5},
                               {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5},
                               {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5},
                               {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5},
                               {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5},
                               {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5},
                               {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5},
                               {00, 6}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6},
                               {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6},
                               {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6},
                               {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6},
                               {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6},
                               {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6},
                               {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6},
                               {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6},
                               {00, 5}, {00, 6}, {00, 5}, {00, 6}, {00, 5}, {00, 6}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function K2_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 09}, {00, 10}, {00, 09}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------
function AUG_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 2 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 20}, {00, 20}, {00, 20}, {00, 20},  		  {00, 15}, {00, 15}, {00, 15}, {01, 15}, 								--1-2
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, 			  {00, 12}, {00, 12}, {02, 12}, {01, 12},								--3-4
							   {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},  {00, 17}, 															--5
							   {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},  {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},			--6-7
                                {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},   {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},			--8-9
							    {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},  {00, 22},	{01, 22}, {00, 22}, {00, 22}, {00, 22}, {01, 22}, 			--10-11 
							   {01, 22}, {00, 22}, {00, 22}, {00, 22}, {01, 22},  {01, 22},  															--12
							  {01, 22}, {00, 22}, {00, 22}, {00, 22}, {01, 22},  {00, 22},	{01, 22}, {00, 22}, {00, 22}, {00, 22}, {01, 22},			--13-14
							   {01, 22}, {01, 22}, {00, 22}, {00, 22}, {00, 22},  {01, 22}, {00, 22}, {00, 22}, {01, 22}, {00, 22}, {00, 22},			--15-16 	                               					
							   {00, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24},  {01, 24}, 															--17						
							   {01, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24},  {01, 24},  {00, 24}, {00, 24},{00, 24}, {01, 24}, {01, 24}, 			--18-19																		        
							    													
                                {00, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},  {00, 24}, {00, 24}, {00, 24}, {01, 24}, {01, 24}, {01, 24}, {00, 24},	--20-21
                               {00, 24}, {00, 24}, {01, 24}, {00, 24},			  {00, 24}, {00, 24}, {01, 24}, {01, 24}, {00, 24}, {00, 24}, 			--22-23
                                {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {00, 24}, 															--24
							   {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {00, 25}, {00, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},			--25-26                        
                                 {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},      {00, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24}, 			--27-28
                                 {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},   {00, 23}, 															--29
							    {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},			--30-31
							   {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},			--30-31
							     {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},			--30-31
							      {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 23}, {01, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},			--30-31
							      {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 23}, {01, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},			--30-31
							     {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 23}, {01, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},			--30-31
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 08}, {01, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {01, 07}, {01, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 08}, {00, 08}, {01, 07}, {01, 08}, {01, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 08},
                               {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 08},
                               {00, 07}, {00, 08}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {01, 07}, {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(15)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AUG_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 2 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 20}, {00, 20}, {00, 20}, {00, 20},  		  {00, 15}, {00, 15}, {00, 15}, {01, 15}, 								--1-2
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, 			  {00, 12}, {00, 12}, {02, 12}, {01, 12},								--3-4
							   {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},  {00, 17}, 															--5
							   {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},  {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},			--6-7
                                {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},   {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},			--8-9
							    {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},  {00, 22},	{01, 22}, {00, 22}, {00, 22}, {00, 22}, {01, 22}, 			--10-11 
							   {01, 22}, {00, 22}, {00, 22}, {00, 22}, {01, 22},  {01, 22},  															--12
							  {01, 22}, {00, 22}, {00, 22}, {00, 22}, {01, 22},  {00, 22},	{01, 22}, {00, 22}, {00, 22}, {00, 22}, {01, 22},			--13-14
							   {01, 22}, {01, 22}, {00, 22}, {00, 22}, {00, 22},  {01, 22}, {00, 22}, {00, 22}, {01, 22}, {00, 22}, {00, 22},			--15-16 	                               					
							   {00, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24},  {01, 24}, 															--17						
							   {01, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24},  {01, 24},  {00, 24}, {00, 24},{00, 24}, {01, 24}, {01, 24}, 			--18-19																		        
							    													
                                {00, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},  {00, 24}, {00, 24}, {00, 24}, {01, 24}, {01, 24}, {01, 24}, {00, 24},	--20-21
                               {00, 24}, {00, 24}, {01, 24}, {00, 24},			  {00, 24}, {00, 24}, {01, 24}, {01, 24}, {00, 24}, {00, 24}, 			--22-23
                                {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {00, 24}, 															--24
							   {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {00, 25}, {00, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},			--25-26                        
                                 {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},      {00, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24}, 			--27-28
                                 {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},   {00, 23}, 															--29
							    {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},			--30-31
							   {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},			--30-31
							     {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 24}, {01, 24}, {00, 24}, {00, 24}, {00, 24}, {00, 24},			--30-31
							      {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 23}, {01, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},			--30-31
							      {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 23}, {01, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},			--30-31
							     {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},  {01, 23}, {01, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},			--30-31
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 08}, {01, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {01, 07}, {01, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 08}, {00, 08}, {01, 07}, {01, 08}, {01, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 08},
                               {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 08},
                               {00, 07}, {00, 08}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {01, 07}, {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(15)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end


function M416_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {01, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {01, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 05}, {00, 06},
                               {00, 06}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 10}, {01, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 10}, {00, 10},
                               {00, 10}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 14}, {00, 14}, {00, 14},
                               {01, 14}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {01, 14}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {01, 15}, {01, 15}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {01, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16}, {01, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16},
                               {00, 16}, {00, 16}, {00, 16}, {01, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16},
                               {01, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17}, {01, 16}, {01, 17}, {00, 16}, {00, 17},
                               {00, 16}, {00, 17}, {00, 16}, {00, 17}, {01, 16}, {01, 17}, {00, 16}, {00, 17}, {00, 16},
                               {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17},
                               {00, 16}, {00, 17}, {01, 16}, {01, 17}, {01, 16}, {01, 17}, {00, 16}, {01, 17}, {01, 16},
                               {00, 17}, {00, 16}, {01, 17}, {01, 16}, {00, 17}, {01, 16}, {00, 17}, {01, 16}, {00, 17},
                               {01, 16}, {00, 17}, {01, 16}, {00, 17}, {01, 16}, {00, 17}, {01, 16}, {00, 17}, {01, 16},
                               {00, 17}, {00, 16}, {01, 17}, {00, 16}, {00, 17}, {01, 16}, {01, 17}, {01, 16}, {01, 17},
                               {00, 17}, {01, 17}, {00, 16}, {01, 17}, {00, 16}, {00, 17}, {01, 16}, {00, 17}, {01, 16},
                               {00, 17}, {00, 17}, {01, 17}, {01, 16}, {00, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17},
                               {01, 16}, {00, 16}, {00, 17}, {00, 16}, {01, 17}, {00, 16}, {00, 17}, {00, 16}, {01, 17},
                               {00, 16}, {00, 17}, {01, 17}, {01, 17}, {00, 17}, {01, 17}, {00, 17}, {01, 17}, {00, 17},
                               {01, 17}, {00, 16}, {00, 17}, {00, 17}, {01, 17}, {00, 17}, {00, 17}, {01, 17}, {00, 17},
                               {01, 18}, {00, 17}, {01, 18}, {01, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18},
                               {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 17}, {00, 18}, {00, 17}, {00, 17},
                               {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18},
                               {00, 17}, {00, 17}, {00, 18}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 11}, {00, 11},
                               {00, 10}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 12}, {00, 12}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13},
                               {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12},
                               {01, 12}, {00, 13}, {00, 13}, {00, 12}, {01, 13}, {01, 12}, {00, 13}, {00, 12}, {00, 13},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 13}, {00, 13}, {00, 13}, {01, 12}, {01, 13}, {01, 12}, {00, 13}, {00, 12}, {00, 13},
                               {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13},
                               {01, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {01, 12},
                               {00, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13},
                               {00, 12}, {00, 13}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 14}, {00, 13}, {01, 13}, {00, 14}, {00, 13},
                               {00, 13}, {00, 14}, {00, 13}, {00, 13}, {00, 14}, {00, 13}, {00, 13}, {01, 14}, {00, 13},
                               {00, 14}, {00, 13}, {00, 13}, {00, 14}, {00, 13}, {00, 13}, {00, 14}, {00, 13}, {00, 13},
                               {00, 14}, {00, 13}, {01, 13}, {00, 14}, {00, 13}, {00, 13}, {00, 14}, {00, 13}, {00, 13},
                               {01, 14}, {00, 13}, {00, 13}, {00, 14}, {00, 13}, {00, 13}, {01, 14}, {00, 13}, {00, 13},
                               {00, 14}, {00, 13}, {01, 13}, {00, 14}, {00, 13}, {00, 13}, {00, 14}, {00, 13}, {00, 13},
                               {00, 14}, {00, 13}, {00, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 05}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05},
                               {01, 03}, {01, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 04}, {00, 04}, {01, 04}, {01, 04},
                               {00, 04}, {00, 05}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 04}, {00, 05}, {00, 04},
                               {00, 04}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 04}, {00, 05}, {00, 05}, {00, 04}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 05},
                               {00, 04}, {01, 05}, {00, 04}, {00, 06}, {00, 05}, {00, 04}, {00, 05}, {01, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 04}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(15)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {01, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 04}, {00, 04}, {00, 05}, {01, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 03}, {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {01, 03}, {01, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {01, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {01, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {01, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {01, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {01, 05},
                               {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function M416_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07},
                               {00, 05}, {00, 07}, {00, 05}, {00, 07}, {00, 05}, {00, 07}, {00, 05}, {00, 07}, {00, 05},
                               {00, 07}, {00, 05}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------
function SCAR_L_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 05}, {01, 04}, {00, 04}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 04}, {00, 05}, {01, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05},
                               {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {01, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {01, 09}, {01, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {01, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {01, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07},
                               {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 06}, {00, 06}, {00, 04}, {00, 06},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 12}, {00, 12}, {00, 12}, {00, 13},
                               {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 13}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 15}, {00, 15}, {00, 14}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 08}, {00, 06}, {00, 08},
                               {00, 06}, {00, 08}, {00, 06}, {00, 08}, {00, 06}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 11}, {01, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 12}, {01, 10}, {00, 11}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {01, 02}, {00, 02}, {00, 03}, {00, 02}, {00, 02}, {00, 03}, {01, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {01, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {01, 05}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 05}, {00, 06}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 05}, {00, 06}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 05}, {00, 06}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 05}, {00, 06}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 04}, {00, 05},
                               {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {01, 04}, {01, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function SCAR_L_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------
function G36C_B()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table
	for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end
    -- Generate cosine-generated recoil pattern
    

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
	
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_BC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {01, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {01, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 06}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 06}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_HB()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 10}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 11}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 08}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 09}, {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 08}, {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 09}, {00, 09}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 10}, {00, 10}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 13},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},
                               {00, 18}, {00, 18}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 18}, {00, 18},
                               {00, 18}, {00, 18}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 18}, {00, 18},
                               {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},
                               {01, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},
                               {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},
                               {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},
                               {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18},
                               {00, 18}, {00, 18}, {00, 18}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 13}, {00, 12}, {00, 13}, {01, 13}, {01, 13}, {01, 13}, {00, 12}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 12}, {00, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {01, 13},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_AB()
    local RC_COUNT = 4 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_ABC()
    local RC_COUNT = 2 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03},
                               {01, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 03}, {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {01, 03}, {01, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {01, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {01, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {01, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_AHB()
    local RC_COUNT = 4 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {01, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {01, 05},
                               {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_AS()
    local RC_COUNT = 2 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {01, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {01, 06},
                               {01, 06}, {00, 06}, {01, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 07}, {00, 06}, {01, 07},
                               {01, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {01, 08}, {00, 07}, {01, 08}, {01, 07},
                               {00, 08}, {01, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {01, 08},
                               {00, 08}, {01, 08}, {01, 08}, {01, 08}, {00, 08}, {01, 08}, {01, 08}, {01, 08}, {00, 08},
                               {01, 08}, {01, 08}, {01, 08}, {00, 08}, {01, 08}, {01, 08}, {01, 08}, {00, 08}, {01, 08},
                               {01, 08}, {01, 08}, {01, 08}, {01, 09}, {01, 09}, {00, 09}, {01, 09}, {01, 09}, {01, 09},
                               {00, 09}, {01, 09}, {01, 09}, {00, 09}, {01, 09}, {00, 09}, {01, 09}, {01, 09}, {01, 10},
                               {00, 09}, {01, 10}, {01, 09}, {01, 10}, {01, 09}, {01, 10}, {00, 09}, {01, 10}, {01, 09},
                               {01, 09}, {00, 10}, {01, 09}, {00, 10}, {01, 09}, {00, 10}, {01, 09}, {00, 10}, {01, 09},
                               {00, 10}, {01, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10},
                               {01, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {01, 10}, {01, 09}, {01, 10}, {00, 09},
                               {01, 10}, {00, 09}, {01, 10}, {00, 09}, {01, 10}, {01, 09}, {00, 10}, {00, 09}, {01, 10},
                               {01, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09},
                               {01, 10}, {00, 09}, {01, 10}, {01, 09}, {01, 10}, {01, 09}, {00, 10}, {01, 09}, {01, 10},
                               {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {01, 10}, {00, 09}, {01, 10}, {00, 09},
                               {01, 10}, {00, 09}, {01, 10}, {00, 10}, {01, 10}, {00, 10}, {01, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {01, 10}, {01, 10},
                               {00, 10}, {01, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {01, 10}, {00, 10}, {01, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {01, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function G36C_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07},
                               {00, 05}, {00, 07}, {00, 05}, {00, 07}, {00, 05}, {00, 07}, {00, 05}, {00, 07}, {00, 05},
                               {00, 07}, {00, 05}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {01, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08}, {01, 09}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 09}, {01, 08}, {01, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {01, 08},
                               {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09},
                               {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 08}, {00, 08}, {01, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------
function AKM_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 02}, {00, 03}, {00, 04},
                               {00, 03}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 06}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 06}, {01, 07}, {00, 06}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 08}, {00, 07}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07},
                               {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 07}, {00, 08}, {00, 08}, {01, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {01, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {01, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {01, 06}, {01, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08},
                               {01, 09}, {01, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09},
                               {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {01, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {01, 09},
                               {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10},
                               {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09},
                               {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 09},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 11},
                               {00, 10}, {01, 11}, {01, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11},
                               {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {01, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 09}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {01, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07},
                               {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08},
                               {00, 09}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 11}, {00, 11}, {01, 11}, {00, 11},
                               {00, 11}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {01, 14}, {00, 14}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13},
                               {01, 13}, {00, 12}, {00, 12}, {00, 14}, {00, 14}, {01, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {01, 14}, {00, 14}, {00, 14}, {01, 14}, {00, 15}, {00, 14}, {01, 15},
                               {00, 14}, {00, 15}, {00, 14}, {00, 15}, {01, 14}, {01, 15}, {00, 14}, {00, 15}, {00, 14},
                               {00, 15}, {00, 14}, {00, 15}, {01, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15},
                               {01, 14}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {01, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16},
                               {00, 16}, {00, 16}, {00, 16}, {01, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {01, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {01, 16}, {00, 16}, {00, 16}, {01, 16}, {00, 16}, {01, 16}, {00, 16}, {01, 16},
                               {00, 16}, {00, 16}, {00, 16}, {01, 16}, {00, 16}, {00, 16}, {01, 17}, {00, 16}, {00, 17},
                               {01, 16}, {01, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16},
                               {01, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {01, 16}, {01, 17},
                               {00, 16}, {00, 17}, {00, 16}, {00, 17}, {01, 16}, {01, 17}, {00, 16}, {00, 17}, {01, 16},
                               {00, 17}, {00, 16}, {01, 17}, {01, 17}, {00, 17}, {00, 17}, {00, 17}, {01, 17}, {01, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {01, 17}, {01, 17}, {01, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {01, 17}, {00, 17}, {01, 17}, {01, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {01, 17}, {01, 17}, {01, 17}, {00, 17}, {01, 17}, {00, 17}, {01, 17},
                               {00, 17}, {00, 17}, {01, 17}, {00, 17}, {00, 17}, {01, 17}, {01, 17}, {00, 17}, {00, 17},
                               {00, 17}, {01, 17}, {01, 17}, {00, 17}, {00, 17}, {01, 17}, {01, 17}, {00, 17}, {00, 17},
                               {01, 17}, {00, 17}, {01, 17}, {00, 17}, {00, 17}, {01, 17}, {00, 17}, {00, 17}, {01, 17},
                               {00, 17}, {00, 17}, {00, 17}, {01, 17}, {00, 17}, {00, 17}, {01, 17}, {00, 17}, {00, 17},
                               {01, 17}, {00, 17}, {00, 17}, {01, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {01, 17},
                               {00, 17}, {01, 17}, {00, 17}, {00, 17}, {00, 17}, {01, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 17}, {01, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {01, 17}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {01, 13}, {00, 11}, {00, 13}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 13}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 13}, {00, 12}, {00, 13}, {01, 12}, {01, 13}, {01, 12}, {00, 13}, {00, 12}, {00, 13},
                               {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13},
                               {01, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {01, 12},
                               {00, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13},
                               {00, 12}, {00, 13}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13},
                               {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12},
                               {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13},
                               {01, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12},
                               {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13},
                               {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14},
                               {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14},
                               {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14},
                               {00, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 05}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07},
                               {00, 08}, {01, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07},
                               {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {01, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07},
                               {00, 08}, {01, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {01, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11},
                               {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 12},
                               {00, 11}, {01, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13},
                               {00, 12}, {01, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12},
                               {01, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13},
                               {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13},
                               {01, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12},
                               {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12}, {01, 13},
                               {00, 12}, {01, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12},
                               {00, 13}, {01, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13},
                               {00, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13},
                               {01, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {01, 13}, {00, 14}, {00, 13},
                               {00, 14}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {01, 13}, {00, 14}, {00, 13}, {01, 14},
                               {00, 13}, {00, 14}, {00, 13}, {01, 14}, {00, 13}, {00, 14}, {00, 13}, {01, 14}, {00, 13},
                               {00, 14}, {00, 13}, {01, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14},
                               {01, 13}, {00, 14}, {00, 13}, {00, 14}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {01, 13},
                               {00, 14}, {00, 13}, {00, 14}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {01, 13}, {00, 14},
                               {00, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function AKM_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09},
                               {00, 10}, {00, 09}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------
function BERRYL_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05},
                               {01, 05}, {00, 06}, {01, 06}, {00, 05}, {01, 05}, {00, 06}, {01, 05}, {00, 05}, {01, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 05}, {00, 07},
                               {01, 07}, {01, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {01, 07}, {00, 05}, {01, 07},
                               {01, 07}, {00, 07}, {01, 07}, {00, 08}, {01, 09}, {00, 09}, {01, 09}, {00, 08}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {01, 08}, {01, 09}, {00, 08}, {01, 09}, {00, 08}, {01, 09}, {00, 08}, {01, 09}, {01, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {01, 08}, {00, 09}, {01, 08}, {01, 09}, {01, 09}, {00, 09}, {01, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {01, 11}, {01, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {01, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {01, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 11}, {00, 09}, {00, 10}, {00, 09},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 11}, {00, 09}, {00, 10}, {00, 09},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 11}, {00, 09}, {00, 10}, {00, 09},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 11}, {00, 09}, {00, 10}, {00, 09},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 11}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 05}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {01, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08}, {01, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 09}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 09},
                               {00, 08}, {00, 07}, {00, 08}, {00, 09}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 09}, {00, 08},
                               {00, 07}, {00, 08}, {00, 09}, {01, 08}, {00, 07}, {00, 08}, {00, 09}, {00, 08}, {00, 07},
                               {00, 08}, {00, 09}, {01, 08}, {01, 09}, {01, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 09}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 09}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 09}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 09}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 09}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 09}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 09}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 09},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 09}, {00, 08}, {00, 08}, {00, 08}, {00, 09},
                               {00, 08}, {00, 08}, {01, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 06}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 11}, {00, 11},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 13},
                               {00, 12}, {00, 13}, {01, 12}, {00, 12}, {00, 12}, {00, 13}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {01, 14},
                               {00, 13}, {00, 14}, {00, 13}, {01, 14}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13},
                               {00, 14}, {00, 13}, {00, 14}, {01, 13}, {01, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14},
                               {01, 13}, {00, 14}, {00, 13}, {00, 14}, {01, 13}, {01, 13}, {00, 13}, {00, 14}, {00, 13},
                               {00, 14}, {00, 13}, {00, 14}, {00, 13}, {01, 14}, {01, 13}, {00, 14}, {00, 13}, {00, 14},
                               {00, 13}, {01, 14}, {00, 13}, {00, 14}, {00, 13}, {01, 14}, {01, 13}, {00, 14}, {00, 13},
                               {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {01, 13}, {01, 14}, {00, 13}, {00, 14},
                               {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {01, 12}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05},
                               {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {01, 11}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {01, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 18}, {00, 19},
                               {00, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 19}, {00, 19}, {00, 19},
                               {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19},
                               {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19},
                               {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 21}, {00, 21},
                               {00, 21}, {00, 21}, {00, 21}, {00, 21}, {00, 21}, {00, 21}, {00, 21}, {00, 21}, {00, 21},
                               {00, 21}, {00, 21}, {00, 21}, {00, 21}, {00, 21}, {00, 21}, {01, 21}, {00, 21}, {00, 21},
                               {00, 21}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23},
                               {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 23},
                               {00, 22}, {01, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22},
                               {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23},
                               {00, 23}, {00, 23}, {00, 24}, {00, 23}, {00, 24}, {01, 23}, {00, 24}, {00, 23}, {00, 24},
                               {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23},
                               {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22},
                               {01, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},
                               {01, 24}, {00, 23}, {00, 24}, {00, 23}, {00, 24}, {00, 23}, {00, 24}, {00, 23}, {00, 24},
                               {00, 23}, {00, 22}, {00, 23}, {00, 22}, {01, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23},
                               {01, 24}, {00, 24}, {00, 23}, {00, 24}, {00, 23}, {00, 24}, {00, 23}, {00, 24}, {00, 23},
                               {01, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23}, {00, 23},
                               {01, 24}, {00, 23}, {00, 24}, {00, 23}, {00, 24}, {00, 23}, {00, 24}, {00, 23}, {00, 24},
                               {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}, {00, 22}, {00, 23}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 11}, {00, 11}, {00, 12}, {00, 12}, {01, 12}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 16},
                               {01, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17},
                               {00, 17}, {00, 17}, {00, 17}, {00, 17}, {00, 17}, {01, 17}, {00, 18}, {00, 17}, {00, 18},
                               {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 17},
                               {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18}, {00, 17}, {00, 18},
                               {00, 17}, {00, 18}, {00, 17}, {01, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 18}, {00, 19},
                               {00, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 18},
                               {00, 19}, {00, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 18}, {00, 19},
                               {00, 18}, {01, 19}, {00, 18}, {00, 19}, {00, 18}, {01, 19}, {00, 18}, {00, 19}, {00, 18},
                               {00, 19}, {00, 18}, {01, 19}, {00, 18}, {00, 19}, {00, 18}, {00, 19}, {00, 19}, {01, 19},
                               {00, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19},
                               {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19},
                               {00, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19},
                               {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19},
                               {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19},
                               {01, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19},
                               {00, 19}, {01, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19},
                               {00, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19},
                               {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19},
                               {00, 19}, {00, 19}, {01, 19}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_AB()
    local RC_COUNT = 4 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {01, 05}, {00, 06}, {00, 05},
                               {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 06}, {01, 06},
                               {00, 07}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 06}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_ABC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 06}, {00, 04}, {00, 05},
                               {01, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 03}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {01, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06},
                               {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_AS()
    local RC_COUNT = 4 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 13}, {00, 12}, {00, 13},
                               {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 13},
                               {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 14}, {00, 13}, {00, 14}, {00, 13},
                               {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14},
                               {01, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 15}, {00, 14}, {00, 14}, {00, 15}, {00, 14},
                               {00, 15}, {00, 14}, {00, 15}, {00, 14}, {01, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15},
                               {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14},
                               {00, 15}, {01, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15},
                               {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {01, 15}, {00, 14},
                               {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15},
                               {00, 14}, {00, 15}, {00, 14}, {00, 15}, {01, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14},
                               {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15},
                               {00, 14}, {01, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14},
                               {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {01, 14}, {00, 14},
                               {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15},
                               {00, 14}, {00, 15}, {00, 14}, {00, 15}, {01, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14},
                               {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15}, {00, 14}, {00, 15},
                               {00, 14}, {00, 15}, {00, 14}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BERRYL_ASC()
    local RC_COUNT = 4 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 11}, {00, 10}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {01, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 12}, {00, 10}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11},
                               {01, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12},
                               {00, 11}, {00, 12}, {00, 11}, {01, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 10},
                               {00, 12}, {00, 10}, {00, 12}, {01, 10}, {00, 12}, {00, 10}, {00, 12}, {00, 10}, {00, 12},
                               {00, 10}, {00, 12}, {01, 10}, {00, 12}, {00, 10}, {00, 12}, {00, 10}, {00, 12}, {00, 10},
                               {00, 12}, {00, 10}, {00, 12}, {01, 10}, {00, 12}, {00, 10}, {00, 12}, {01, 10}, {01, 12},
                               {00, 10}, {00, 12}, {00, 10}, {00, 12}, {00, 10}, {00, 12}, {00, 10}, {01, 12}, {00, 10},
                               {00, 12}, {00, 10}, {00, 12}, {00, 10}, {00, 12}, {00, 10}, {01, 12}, {00, 10}, {00, 12},
                               {00, 10}, {00, 12}, {00, 10}, {00, 12}, {00, 10}, {00, 12}, {01, 10}, {00, 12}, {00, 10},
                               {00, 12}, {00, 10}, {00, 12}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------

function AUG_()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end

function AUG_yBC()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end

function AUG_HB()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end


function AUG_HBC()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(0, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end

function AUG_S()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 15*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 21*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 20*RCm },
		{ x = 00*0,  y = 20*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 20*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 20*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 20*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 20*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 20*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 20*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 20*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
		{ x = 00*0,  y = 23*RCm },
		{ x = 00*0,  y = 22*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(0, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end

function AUG_SC()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 16*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 19*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 19*RCm },
		{ x = 00*0,  y = 19*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 19*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
		{ x = 00*0,  y = 18*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(0, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end


function AUG_AB()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(0, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end


function AUG_ABC()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 02*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(0, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end


function AUG_AHB()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(0, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end


function AUG_AHBC()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 03*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 05*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 04*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end

function AUG_AS()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 06*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 09*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 12*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
		{ x = 00*0,  y = 14*RCm },
		{ x = 00*0,  y = 13*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(0, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end


function AUG_ASC()
    local RCm = 1
    RC_TABLE = {
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 08*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 07*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 11*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
		{ x = 00*0,  y = 10*RCm },
}
	RC_COUNT = #RC_TABLE
	local LastIndex = 1
	if IsMouseButtonPressed(3)then 
		if (LastIndex <= RC_COUNT) then
			i = LastIndex
		else
			i = 1
		end
		while i <= RC_COUNT do
			if not IsMouseButtonPressed(1) then
				LastIndex = i
				break
			end
			MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)Sleep(1)
			if not IsMouseButtonPressed(1) then
				break
			end
			i = i + 1
		end
	end
end

---===========================================================================================================

------=============================================================================================------

function GROZA_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 04}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05},
                               {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10},
                               {00, 09}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10},
                               {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {01, 10}, {00, 09}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 05},
                               {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 05}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06},
                               {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {01, 06}, {00, 07}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 09}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {01, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {01, 14}, {01, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {01, 14}, {00, 14}, {00, 15}, {01, 14}, {00, 15}, {00, 14}, {00, 15},
                               {00, 14}, {00, 15}, {00, 14}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15},
                               {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {01, 16},
                               {00, 15}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {01, 16}, {00, 15}, {00, 16}, {00, 15}, {01, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16}, {01, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16},
                               {00, 16}, {01, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {01, 16}, {00, 16}, {00, 17}, {00, 16}, {01, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17},
                               {00, 16}, {00, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16},
                               {00, 17}, {00, 16}, {00, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17}, {01, 16}, {01, 17},
                               {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {01, 17}, {00, 16}, {00, 17}, {00, 16},
                               {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17},
                               {00, 16}, {00, 17}, {00, 16}, {01, 17}, {00, 16}, {00, 17}, {00, 16}, {01, 17}, {01, 16},
                               {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17},
                               {00, 16}, {00, 17}, {00, 16}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 12}, {01, 11}, {01, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12}, {01, 11},
                               {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12},
                               {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 04}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 03}, {00, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05},
                               {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10},
                               {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10},
                               {00, 09}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10},
                               {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {01, 10}, {00, 09}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10},
                               {01, 09}, {01, 10}, {00, 09}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 05},
                               {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 05}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06},
                               {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {01, 06}, {00, 07}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 09}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {01, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {01, 14}, {01, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {01, 14}, {00, 14}, {00, 15}, {01, 14}, {00, 15}, {00, 14}, {00, 15},
                               {00, 14}, {00, 15}, {00, 14}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15},
                               {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {01, 16},
                               {00, 15}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {01, 16}, {00, 15}, {00, 16}, {00, 15}, {01, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16}, {01, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16},
                               {00, 16}, {01, 16}, {01, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {01, 16},
                               {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16}, {00, 16},
                               {01, 16}, {00, 16}, {00, 17}, {00, 16}, {01, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17},
                               {00, 16}, {00, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16},
                               {00, 17}, {00, 16}, {00, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17}, {01, 16}, {01, 17},
                               {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {01, 17}, {00, 16}, {00, 17}, {00, 16},
                               {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17},
                               {00, 16}, {00, 17}, {00, 16}, {01, 17}, {00, 16}, {00, 17}, {00, 16}, {01, 17}, {01, 16},
                               {00, 17}, {00, 16}, {00, 17}, {00, 16}, {00, 17}, {01, 16}, {00, 17}, {00, 16}, {00, 17},
                               {00, 16}, {00, 17}, {00, 16}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function GROZA_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 12}, {01, 11}, {01, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12}, {01, 11},
                               {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12},
                               {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------

function MG3_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MG3_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {01, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {01, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 02}, {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {01, 01},
                               {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 02}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01},
                               {00, 01}, {01, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 02}, {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {01, 01}, {00, 01}, {00, 01},
                               {00, 02}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 02}, {00, 01},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 02}, {00, 01},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01},
                               {01, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {01, 01}, {00, 01},
                               {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02},
                               {00, 01}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 02},
                               {00, 01}, {01, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {01, 02},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 02}, {00, 01},
                               {00, 02}, {00, 01}, {00, 02}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02}, {00, 01},
                               {00, 01}, {00, 02}, {00, 01}, {01, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02}, {00, 01},
                               {00, 01}, {01, 02}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 02}, {00, 01}, {00, 01},
                               {00, 02}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02},
                               {00, 01}, {00, 01}, {00, 02}, {00, 01}, {01, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02},
                               {00, 01}, {00, 02}, {01, 01}, {00, 02}, {00, 01}, {00, 01}, {00, 02}, {00, 01}, {00, 02},
                               {00, 01}, {00, 01}, {00, 01}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MG3_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 06}, {00, 07}, {01, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 06}, {00, 07},
                               {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 06}, {00, 07},
                               {00, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {01, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {01, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {01, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {01, 08}, {00, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {01, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {01, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {01, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {01, 07}, {00, 07}, {00, 08},
                               {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {01, 08}, {00, 07}, {00, 07}, {00, 07},
                               {00, 08}, {00, 07}, {00, 07}, {01, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07},
                               {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07},
                               {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {01, 07}, {00, 08}, {00, 07}, {00, 07},
                               {00, 08}, {00, 07}, {00, 07}, {00, 08}, {01, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07},
                               {00, 08}, {00, 07}, {01, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07},
                               {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 08}, {00, 07}, {00, 07},
                               {00, 08}, {00, 07}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MG3_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 02}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 02}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 02}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 02}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 02}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 02}, {00, 03}, {00, 03}, {01, 03}, {00, 02}, {00, 03},
                               {00, 03}, {00, 03}, {00, 02}, {00, 03}, {01, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 03},
                               {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03},
                               {00, 03}, {00, 03}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03},
                               {00, 03}, {01, 02}, {00, 03}, {00, 03}, {00, 03}, {01, 02}, {00, 03}, {00, 03}, {00, 02},
                               {00, 03}, {00, 03}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03},
                               {00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03},
                               {00, 03}, {00, 02}, {01, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03},
                               {01, 03}, {00, 02}, {00, 03}, {00, 03}, {01, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {01, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03},
                               {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {01, 02}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------

function UMP9_B()
    local RC_COUNT = 2 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
	local customRecoilTable = {
        {0, 5},{0, 6},{0, 6},
        {0, 5},{0, 6},{0, 6},
        {0, 5},{0, 6},{0, 7},
        {0, 6},{0, 7},{0, 7},
        {0, 6},{0, 7},{0, 7},
        {0, 7},{0, 7},{0, 8},
        {0, 8},{0, 8},{0, 8},
        {0, 8},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 10},
        {0, 11},{0, 10},{0, 10},
        {0, 11},{0, 10},{0, 10},
        {0, 11},{0, 10},{0, 10},
        {0, 11},{0, 10},{0, 10},
        {0, 11},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UMP9_BC()
    local RC_COUNT = 2 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 8}, {0, 6}, {0, 6}, {0, 8}, {0, 6}, {0, 6}, {0, 8}, {0, 6}, {0, 7},
                {0, 8}, {0, 7}, {0, 7}, {0, 8}, {0, 7}, {0, 7}, {0, 8}, {0, 7}, {0, 7}, {0, 8}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UMP9_HB()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 8}, {0, 8}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 9}, {0, 9}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 13}, {0, 13}, {0, 13}, {0, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function UMP9_HBC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function UMP9_S()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 16}, {0, 16}, {0, 16},
                {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 20}, {0, 20},
                {0, 20}, {0, 20}, {0, 20}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21},
                {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 22}, {0, 22},
                {0, 22}, {0, 22}, {0, 22}, {0, 22}, {0, 22}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23},
                {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23},
                {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23},
                {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25},
                {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25},
                {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UMP9_SC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15},
                {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 16},
                {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17},
                {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17},
                {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17},
                {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17},
                {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UMP9_AB()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4},
                {0, 4}, {0, 4}, {0, 4}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5},
                {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5},
                {0, 5}, {0, 5}, {0, 5}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UMP9_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 3}, {0, 3}, {0, 3}, {0, 3}, {0, 3}, {0, 3}, {0, 3}, {0, 3}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4},
                {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4},
                {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4},
                {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4},
                {0, 4}, {0, 4}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5},
                {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5},
                {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5},
                {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UMP9_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UMP9_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 3}, {0, 3}, {0, 3}, {0, 3}, {0, 3}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5},
                {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 9}, {0, 0},
                {0, 0}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UMP9_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable =  {{0, 10}, {0, 11}, {0, 11}, {0, 10}, {0, 11}, {0, 11}, {0, 10}, {0, 11}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UMP9_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------

function TOMMY_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 9},
                {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 10}, {0, 11}, {0, 12}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15},
                {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 15},
                {0, 15}, {0, 15}, {0, 15}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
                {0, 14}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function TOMMY_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable =  {{0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function TOMMY_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 7}, {0, 7}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 9}, {0, 9}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17},
                {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 19}, {0, 19},
                {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19},
                {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19},
                {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}, {0, 19}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function TOMMY_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13},
                {0, 13}, {0, 13}, {0, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function TOMMY_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 14}, {0, 14}, {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 16}, {0, 16}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20},
                {0, 20}, {0, 20}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30},
                {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 30}, {0, 35},
                {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35},
                {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35},
                {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 35}, {0, 0}, {0, 0}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function TOMMY_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 14}, {0, 14},
                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 15}, {0, 15}, {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 20},
                {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 20}, {0, 21},
                {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24},
                {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24},
                {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 24}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 22},
                {0, 22}, {0, 22}, {0, 22}, {0, 22}, {0, 22}, {0, 22}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function TOMMY_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable ={{0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12}, {0, 12},
                {0, 0}, {0, 0}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function TOMMY_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 4}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5},
                {0, 5}, {0, 5}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7},
                {0, 7}, {0, 7}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}}
    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function TOMMY_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 8},
                			  {0, 8}, {0, 8}, {0, 8}, {0, 8}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 11}, {0, 11}, {0, 11}, {0, 11},
			          	  {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 13}, {0, 13},
			                {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
              			  {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
			                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
              			  {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
			                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
			                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
			                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
			                {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14},
			                {0, 14}, {0, 14}, {0, 14}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function TOMMY_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 5}, {0, 6}, {0, 6}, {0, 6}, {0, 6}, {0, 6},
                {0, 6}, {0, 6}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 7}, {0, 9}, {0, 9}, {0, 9}, {0, 9}, {0, 9},
                {0, 9}, {0, 9}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10},
                {0, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function TOMMY_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 14}, {0, 15}, {0, 15},
                {0, 15}, {0, 15}, {0, 15}, {0, 15}, {0, 16}, {0, 16}, {0, 17}, {0, 17}, {0, 17}, {0, 17}, {0, 21},
                {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 21}, {0, 23},
                {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 23}, {0, 25}, {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26},
                {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26},
                {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 26}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25},
                {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25},
                {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25},
                {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25},
                {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25},
                {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25},
                {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 25}, {0, 0}, {0, 0}}
    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function TOMMY_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable =  {{0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 10}, {0, 11}, {0, 11},
                {0, 11}, {0, 11}, {0, 11}, {0, 11}, {0, 12}, {0, 12}, {0, 13}, {0, 13}, {0, 13}, {0, 13}, {0, 16},
                {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 16}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 18},
                {0, 18}, {0, 18}, {0, 18}, {0, 18}, {0, 25}, {0, 0}, {0, 0}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------

function BIZON_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 9},{ 0, 9},{ 0, 9},
	{0, 9},{ 0, 9},{ 0, 9},
	{0, 9},{ 0, 9},{ 0, 9},
	{0, 9},{ 0, 9},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 8},
	{0, 8},{ 0, 8},{ 0, 8},
	{0, 8},
	}
    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BIZON_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BIZON_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable ={
 	{0, 7},{ 0, 7},{ 0, 7},
 	{0, 7},{ 0, 7},{ 0, 7},
 	{0, 7},{ 0, 7},{ 0, 8},
 	{0, 8},{ 0, 8},{ 0, 8},
 	{0, 8},{ 0, 8},{ 0, 8},
 	{0, 8},{ 0, 8},{ 0, 8},
 	{0, 8},{ 0, 8},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},         
 	{0, 9},{ 0, 9},{ 0, 9},
 	{0, 9},{ 0, 9},{ 0, 9},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function BIZON_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 8},{ 0, 8},{ 0, 8},
	{0, 8},{ 0, 8},{ 0, 8},
	{0, 8},{ 0, 8},{ 0, 8},
	{0, 8},{ 0, 8},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	}
    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function BIZON_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 20},{ 0, 20},{ 0, 20},
	{0, 20},{ 0, 20},{ 0, 20},
	{0, 20},{ 0, 20},{ 0, 20},
	{0, 20},{ 0, 20},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 17},
	{0, 17},{ 0, 17},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 18},{ 0, 18},
	{0, 18},{ 0, 18},{ 0, 18},
	{0, 25},{ 0, 0},{ 0, 0},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function BIZON_SC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 15},
	{0, 15},{ 0, 15},{ 0, 15},
	{0, 15},{ 0, 15},{ 0, 15},
	{0, 15},{ 0, 15},{ 0, 15},
	{0, 15},{ 0, 15},{ 0, 15},
	{0, 15},{ 0, 15},{ 0, 15},
	{0, 15},{ 0, 15},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function BIZON_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 5},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function BIZON_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable =  {
	{0, 3},{ 0, 3},{ 0, 3},
	{0, 3},{ 0, 3},{ 0, 3},
	{0, 3},{ 0, 3},{ 0, 3},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 5},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 4},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 6},{ 0, 5},
	{0, 6},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function BIZON_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 7},{ 0, 7},
	{0, 7},{ 0, 0},
	}
    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function BIZON_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 4},{ 0, 4},{ 0, 4},
	{0, 4},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 6},
	{0, 6},{ 0, 6},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	{0, 5},{ 0, 5},{ 0, 5},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function BIZON_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 16},{ 0, 16},{ 0, 16},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},        
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 13},{ 0, 13},
	{0, 13},{ 0, 0},{ 0, 0},
	}
    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
function BIZON_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	{0, 8},{ 0, 8},{ 0, 8},
	{0, 8},{ 0, 8},{ 0, 8},
	{0, 8},{ 0, 8},{ 0, 9},
	{0, 9},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 12},
	{0, 12},{ 0, 12},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	{0, 10},{ 0, 10},{ 0, 10},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

---===========================================================================================================

------=============================================================================================------

function UZI_B()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 07},
                               {01, 07}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11},
                               {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {01, 11}, {00, 11}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 11}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UZI_BC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 01}, {00, 02}, {00, 01}, {00, 02}, {00, 01}, {00, 02}, {01, 01}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 09}, {00, 09}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09},
                               {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09},
                               {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08},
                               {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09},
                               {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {01, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UZI_HB()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12},
                               {00, 13}, {00, 12}, {01, 13}, {00, 12}, {00, 13}, {01, 12}, {00, 13}, {00, 12}, {00, 13},
                               {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {00, 12}, {00, 13}, {01, 12},
                               {00, 13}, {01, 12}, {00, 13}, {00, 12}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15},
                               {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15},
                               {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UZI_HBC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05},
                               {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09},
                               {00, 08}, {01, 09}, {00, 09}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UZI_AB()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 01}, {00, 02}, {00, 01}, {00, 02}, {00, 01}, {00, 02}, {01, 01}, {00, 02}, {00, 01},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 08},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 08},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UZI_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {01, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {01, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {01, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {01, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {01, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UZI_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 01}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function UZI_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {01, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------

function MP5_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {01, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {01, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08}, {01, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07},
                               {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07},
                               {00, 08}, {00, 07}, {01, 08}, {01, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {01, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15},
                               {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {01, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15},
                               {01, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {01, 15}, {01, 15}, {00, 15}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 09}, {01, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {01, 10}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {01, 09}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 03}, {01, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02},
                               {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 02},
                               {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {01, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {01, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02},
                               {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {01, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 08}, {01, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP5_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------

function P90_B()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
        {0, 6},{0, 6},{0, 6},
        {0, 6},{0, 6},{0, 6},
        {0, 7},{0, 7},{0, 7},
        {0, 7},{0, 7},{0, 7},
        {0, 7},{0, 7},{0, 7},
        {0, 7},{0, 7},{0, 7},
        {0, 7},{0, 7},{0, 7},
        {0, 7},{0, 7},{0, 7},
        {0, 7},{0, 7},{0, 7},
        {0, 7},{0, 7},{0, 7},
        {0, 7},{0, 6},{0, 6},
        {0, 6},{0, 6},{0, 6},
        {0, 6},{0, 6},{0, 6},
        {0, 6},{0, 6},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},        
        {0, 5},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function P90_BC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 5},{0, 5},{0, 5},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},{0, 4},
        {0, 4},{0, 4},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function P90_S()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
        {0, 13},{0, 13},{0, 13},
        {0, 13},{0, 13},{0, 13},
        {0, 13},{0, 13},{0, 16},
        {0, 16},{0, 16},{0, 16},
        {0, 16},{0, 16},{0, 16},
        {0, 16},{0, 16},{0, 17},
        {0, 17},{0, 17},{0, 17},
        {0, 17},{0, 17},{0, 17},
        {0, 17},{0, 17},{0, 15},
        {0, 15},{0, 15},{0, 15},
        {0, 15},{0, 15},{0, 15},
        {0, 15},{0, 15},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 11},{0, 11},
        {0, 11},{0, 0},{0, 0},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function P90_SC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {
	   {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 10},
        {0, 10},{0, 10},{0, 13},
        {0, 13},{0, 13},{0, 13},
        {0, 13},{0, 13},{0, 13},
        {0, 13},{0, 13},{0, 13},
        {0, 13},{0, 13},{0, 13},
        {0, 13},{0, 13},{0, 13},
        {0, 13},{0, 13},{0, 12},
        {0, 12},{0, 12},{0, 12},
        {0, 12},{0, 12},{0, 12},
        {0, 12},{0, 12},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 9},{0, 9},
        {0, 9},{0, 0},{0, 0},
	}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(19)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

---===========================================================================================================

------=============================================================================================------

function Vector_B()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 09}, {00, 08}, {00, 09},
                               {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {01, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09},
                               {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 09},
                               {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_BC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_HB()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11},
                               {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {01, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {01, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11},
                               {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_HBC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {01, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {01, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {01, 08}, {01, 07}, {00, 08}, {01, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {00, 08}, {00, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07},
                               {00, 08}, {00, 07}, {00, 08}, {01, 07}, {01, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08},
                               {00, 07}, {01, 08}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {01, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_S()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 10}, {00, 10},
                               {00, 10}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13},
                               {00, 13}, {00, 13}, {00, 14}, {00, 14}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {00, 14}, {00, 14}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 20},
                               {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {01, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20},
                               {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {01, 22}, {01, 21}, {00, 22}, {00, 21},
                               {00, 22}, {00, 21}, {00, 22}, {01, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22},
                               {00, 21}, {01, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21},
                               {00, 22}, {01, 21}, {01, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {01, 22},
                               {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {01, 21}, {00, 22}, {00, 21},
                               {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {01, 22}, {01, 21}, {00, 22},
                               {00, 21}, {00, 22}, {00, 21}, {00, 22}, {01, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21},
                               {00, 22}, {00, 21}, {01, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22},
                               {00, 21}, {00, 22}, {01, 21}, {01, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21},
                               {01, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {01, 21}, {00, 22},
                               {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {01, 22}, {01, 21},
                               {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {01, 21}, {00, 22}, {00, 21}, {00, 22},
                               {00, 21}, {00, 22}, {00, 21}, {01, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21},
                               {00, 22}, {00, 21}, {00, 22}, {01, 21}, {01, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22},
                               {00, 21}, {01, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {01, 21},
                               {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {01, 22},
                               {01, 21}, {00, 22}, {00, 21}, {00, 22}, {00, 21}, {00, 22}, {01, 21}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_SC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 14},
                               {00, 14}, {00, 14}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14},
                               {01, 14}, {01, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {01, 14}, {00, 14},
                               {00, 14}, {00, 14}, {00, 14}, {00, 14}, {00, 14}, {01, 14}, {01, 14}, {00, 14}, {01, 14},
                               {00, 14}, {00, 14}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15}, {01, 15},
                               {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {01, 15},
                               {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {00, 15}, {00, 15}, {01, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15}, {00, 15},
                               {01, 16}, {01, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15},
                               {00, 16}, {00, 15}, {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {01, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15},
                               {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 15},
                               {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {01, 16}, {00, 15}, {01, 16}, {00, 15},
                               {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16},
                               {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {01, 16}, {01, 15}, {00, 16},
                               {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_AB()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {01, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {01, 05}, {00, 06}, {00, 05}, {00, 06},
                               {01, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 05},
                               {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 06}, {00, 05}, {01, 06},
                               {00, 05}, {00, 06}, {00, 05}, {01, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_ABC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_AHB()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {01, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {01, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_AHBC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {01, 04}, {00, 04},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_AS()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 11},
                               {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11},
                               {01, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function Vector_ASC()
    local RC_COUNT = 0 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================

------=============================================================================================------
function MP9_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04},
                               {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 02},
                               {01, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04},
                               {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 02},
                               {01, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {01, 04},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 04}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 01}, {00, 01},
                               {00, 01}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 02}, {00, 02},
                               {01, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02},
                               {01, 02}, {00, 02}, {00, 02}, {00, 02}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {01, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03},
                               {00, 04}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03},
                               {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {00, 01}, {01, 01}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {01, 04},
                               {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {01, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02},
                               {01, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03},
                               {00, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02},
                               {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 03}, {00, 02},
                               {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03},
                               {00, 02}, {01, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02},
                               {00, 03}, {00, 02}, {00, 03}, {00, 02}, {01, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03},
                               {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02},
                               {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03}, {01, 02}, {00, 03}, {00, 02}, {00, 03},
                               {01, 02}, {00, 03}, {00, 02}, {00, 03}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 11},
                               {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {01, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {00, 11}, {00, 12}, {00, 11},
                               {00, 12}, {00, 11}, {00, 12}, {00, 11}, {01, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12},
                               {00, 11}, {00, 12}, {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11},
                               {01, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12},
                               {01, 11}, {00, 12}, {00, 11}, {00, 12}, {00, 11}, {00, 12}, {01, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function MP9_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================
------=============================================================================================------
function ACE32_B()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {01, 06}, {00, 05}, {00, 06},
                               {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05}, {00, 06}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 07}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 09}, {01, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 10}, {00, 09}, {01, 10},
                               {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10},
                               {00, 09}, {01, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {00, 09},
                               {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09}, {00, 10}, {00, 09}, {00, 10},
                               {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09}, {00, 10}, {00, 09},
                               {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09}, {00, 10},
                               {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {01, 09},
                               {00, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 10}, {01, 10},
                               {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_BC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07},
                               {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_HB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 10}, {00, 10}, {00, 10}, {00, 09}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12},
                               {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13},
                               {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13}, {00, 13},
                               {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}, {00, 13},
                               {00, 13}, {00, 13}, {00, 13}, {01, 12}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13},
                               {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13}, {01, 13}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_HBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 06},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 05}, {00, 05}, {00, 05}, {00, 06}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {01, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10},
                               {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10}, {00, 10},
                               {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}, {00, 10},
                               {00, 10}, {00, 10}, {00, 10}, {01, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10},
                               {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {00, 10}, {01, 10}, {01, 10}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_S()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {01, 12},
                               {00, 12}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13},
                               {00, 13}, {01, 13}, {00, 13}, {00, 13}, {01, 13}, {00, 13}, {00, 13}, {00, 13}, {01, 13},
                               {00, 13}, {00, 13}, {01, 13}, {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16},
                               {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15},
                               {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 17},
                               {00, 17}, {00, 18}, {01, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {01, 18},
                               {00, 18}, {00, 18}, {01, 18}, {00, 18}, {00, 18}, {00, 18}, {00, 18}, {01, 18}, {00, 18},
                               {00, 18}, {01, 18}, {00, 18}, {00, 18}, {00, 19}, {00, 18}, {00, 19}, {01, 18}, {00, 19},
                               {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19},
                               {00, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19},
                               {00, 19}, {00, 19}, {00, 19}, {00, 19}, {01, 19}, {00, 19}, {01, 19}, {00, 19}, {00, 19},
                               {00, 19}, {01, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 19}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20},
                               {00, 20}, {01, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {00, 20}, {01, 20}, {00, 20},
                               {00, 21}, {00, 20}, {00, 21}, {00, 20}, {00, 21}, {01, 20}, {00, 21}, {00, 20}, {00, 21},
                               {01, 20}, {00, 21}, {00, 20}, {00, 21}, {01, 20}, {00, 21}, {00, 20}, {00, 21}, {00, 20},
                               {00, 21}, {01, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21}, {00, 20}, {01, 21},
                               {00, 20}, {00, 21}, {01, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21}, {00, 20},
                               {01, 21}, {00, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21},
                               {00, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21}, {00, 20}, {00, 21}, {01, 20},
                               {00, 21}, {00, 20}, {00, 21}, {00, 20}, {01, 21}, {00, 20}, {00, 21}, {00, 20}, {00, 21},
                               {00, 21}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_SC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {01, 09},
                               {00, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {00, 10}, {01, 09},
                               {00, 10}, {01, 09}, {00, 10}, {00, 09}, {01, 10}, {00, 09}, {00, 10}, {00, 09}, {01, 10},
                               {00, 09}, {00, 10}, {01, 09}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12},
                               {01, 12}, {00, 12}, {00, 12}, {00, 12}, {00, 12}, {01, 12}, {00, 12}, {00, 12}, {00, 12},
                               {00, 13}, {00, 13}, {01, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {01, 14},
                               {00, 13}, {00, 14}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {01, 14}, {00, 13},
                               {00, 14}, {01, 13}, {00, 14}, {00, 13}, {00, 14}, {00, 13}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}, {01, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15}, {00, 16},
                               {00, 15}, {00, 16}, {01, 15}, {00, 16}, {00, 15}, {00, 16}, {00, 15}, {00, 16}, {01, 15},
                               {00, 16}, {00, 15}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_AB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {01, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_ABC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {01, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02},
                               {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 02}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 04}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03},
                               {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {01, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04},
                               {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_AHB()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {01, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 06}, {00, 07},
                               {00, 06}, {00, 07}, {01, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06},
                               {00, 07}, {00, 06}, {01, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07}, {00, 06}, {00, 07},
                               {00, 06}, {00, 07}, {00, 06}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {01, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_AHBC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {00, 03}, {01, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {01, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04},
                               {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 04}, {00, 03},
                               {00, 04}, {00, 03}, {00, 04}, {00, 03}, {00, 05}, {00, 03}, {00, 04}, {00, 04}, {00, 04},
                               {01, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {00, 04}, {01, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {01, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05}, {00, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04},
                               {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {01, 04}, {00, 05},
                               {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 04}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {01, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_AS()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {01, 06}, {00, 06}, {00, 06},
                               {00, 06}, {00, 06}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08}, {00, 09},
                               {00, 08}, {00, 09}, {00, 08}, {00, 09}, {00, 08}, {01, 09}, {00, 08}, {00, 09}, {00, 08},
                               {00, 09}, {00, 08}, {00, 09}, {01, 08}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 10}, {00, 09}, {01, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {01, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09}, {00, 09},
                               {00, 09}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {00, 10},
                               {00, 11}, {00, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11},
                               {01, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10}, {01, 11}, {00, 10},
                               {00, 11}, {00, 10}, {01, 11}, {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11},
                               {00, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 10}, {00, 11}, {00, 10}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11},
                               {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {01, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11},
                               {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}, {00, 11}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end

function ACE32_ASC()
    local RC_COUNT = 1 -- Number of points in the cosine-generated recoil pattern
    local RC_TABLE = {} -- Recoil pattern table

    -- Generate cosine-generated recoil pattern
    for i = 1, RC_COUNT do
        local angle = (i - 1) * (math.pi / RC_COUNT)
        local x = 0
        local y = math.cos(angle) * 5 -- Adjust the multiplier for recoil intensity
        table.insert(RC_TABLE, {
            x = x,
            y = y
        })
    end

    -- Your custom recoil table
    local customRecoilTable = {{00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {00, 05}, {01, 05}, {00, 05}, {00, 05},
                               {00, 05}, {00, 05}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06},
                               {00, 06}, {01, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 06}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {01, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {01, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07}, {00, 07},
                               {00, 07}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08},
                               {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08},
                               {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08},
                               {01, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08},
                               {00, 08}, {00, 08}, {00, 08}, {00, 08}, {01, 08}, {00, 08}, {00, 08}, {01, 08}}

    -- Add the custom recoil data to the main recoil table
    for _, customPoint in ipairs(customRecoilTable) do
        table.insert(RC_TABLE, {
            x = customPoint[1],
            y = customPoint[2]
        })
    end

    local LastIndex = 1

    if IsMouseButtonPressed(3) then
        if (LastIndex <= #RC_TABLE) then
            i = LastIndex
        else
            i = 1
        end

        while i <= #RC_TABLE do
            if not IsMouseButtonPressed(1) then
                LastIndex = i
                break
            end
            MoveMouseRelative(RC_TABLE[i].x, RC_TABLE[i].y)
            Sleep(1)
            if not IsMouseButtonPressed(1) then
                break
            end
            i = i + 1
        end
    end
end
---===========================================================================================================
EnablePrimaryMouseButtonEvents(true);
function OnEvent(event, arg)
    if (event == "MOUSE_BUTTON_PRESSED" and arg == AKM) or (event == "G_PRESSED" and arg == AKM_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg

        if (WeaponRecoil == false) then
            OutputLogMessage("=====> AKM MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> AKM MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == K2) or (event == "G_PRESSED" and arg == K2_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> K2 MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> K2 MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == MP5K) or (event == "G_PRESSED" and arg == MP5K_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> MP5K MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> MP5K MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == TOMMY) or (event == "G_PRESSED" and arg == TOMMY_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> TOMMY MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> TOMMY MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == BERYL) or (event == "G_PRESSED" and arg == BERYL_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> BERYL MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> BERYL MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == M416) or (event == "G_PRESSED" and arg == M416_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> M416 MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> M416 MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == SCAR_L) or (event == "G_PRESSED" and arg == SCAR_L_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> SCAR_L MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> SCAR_L MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == GROZA) or (event == "G_PRESSED" and arg == GROZA_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> GROZA MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> GROZA MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == AUG) or (event == "G_PRESSED" and arg == AUG_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> AUG MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> AUG MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == G36C) or (event == "G_PRESSED" and arg == G36C_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> G36C MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> G36C MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == FAMAS) or (event == "G_PRESSED" and arg == FAMAS_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> FAMAS MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> FAMAS MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == M164A) or (event == "G_PRESSED" and arg == M164A_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> M164A MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> M164A MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == MINI14) or (event == "G_PRESSED" and arg == MINI14_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("MINI-14 MACRO [ OFF ]\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("MINI-14 MACRO [ ON ]\n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == ACE32) or (event == "G_PRESSED" and arg == ACE32_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> ACE32 MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> ACE32 MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == P92_Handgun) or (event == "G_PRESSED" and arg == P92_Handgun_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> P92 MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> P92 - Handgun MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == MUTANT) or (event == "G_PRESSED" and arg == MUTANT_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> MUTANT MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> MUTANT MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == M249) or (event == "G_PRESSED" and arg == M249_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> M249 MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else

            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> M249 MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == MG3) or (event == "G_PRESSED" and arg == MG3_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> MG3 MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> MG3 MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == BIZON) or (event == "G_PRESSED" and arg == BIZON_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> BIZON MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> BIZON MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end

    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == UZI) or (event == "G_PRESSED" and arg == UZI_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> UZI MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> UZI MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == P90) or (event == "G_PRESSED" and arg == P90_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> P90 MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> P90 MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == MP9) or (event == "G_PRESSED" and arg == MP9_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> MP9-SMG MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> MP9-SMG MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == Vector) or (event == "G_PRESSED" and arg == Vector_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> VECTOR MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> VECTOR MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif (event == "MOUSE_BUTTON_PRESSED" and arg == UMP9) or (event == "G_PRESSED" and arg == UMP9_gk) then
        WeaponRecoil = not WeaponRecoil
        CurrentWeapon = arg
        if (WeaponRecoil == false) then
            OutputLogMessage("=====> UMP9 MACRO \t< OFF >\n")
            OutputLogMessage("- - - - DEVILSOFTWARES.COM - - - -\n")
            if IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        else
            OutputLogMessage("\n- - - - DEVILSOFTWARES.COM - - - -\n")
            OutputLogMessage("=====> UMP9 MACRO \t< ON > \n")
            if not IsKeyLockOn(Lighton_key) then
                PressAndReleaseKey(Lighton_key)
            end
        end
    elseif CurrentWeapon == P90 or CurrentWeapon == P90_gk then
        if WeaponRecoil == true then
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    P90_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        P90_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        P90_BC()
                    else
                        P90_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == Vector or CurrentWeapon == Vector_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        Vector_ASC()
                    else
                        Vector_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            Vector_AHBC()
                        else
                            Vector_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            Vector_AHB()
                        else
                            Vector_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    Vector_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        Vector_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            Vector_HBC()
                        else
                            Vector_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            Vector_HB()
                        end
                    else
                        Vector_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == MP9 or CurrentWeapon == MP9_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        MP9_ASC()
                    else
                        MP9_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            MP9_AHBC()
                        else
                            MP9_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            MP9_AHB()
                        else
                            MP9_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    MP9_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        MP9_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            MP9_HBC()
                        else
                            MP9_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            MP9_HB()
                        end
                    else
                        MP9_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == TOMMY or CurrentWeapon == TOMMY_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        TOMMY_ASC()
                    else
                        TOMMY_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            TOMMY_AHBC()
                        else
                            TOMMY_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            TOMMY_AHB()
                        else
                            TOMMY_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    TOMMY_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        TOMMY_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            TOMMY_HBC()
                        else
                            TOMMY_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            TOMMY_HB()
                        end
                    else
                        TOMMY_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == UMP9 or CurrentWeapon == UMP9_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        UMP9_ASC()
                    else
                        UMP9_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            UMP9_AHBC()
                        else
                            UMP9_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            UMP9_AHB()
                        else
                            UMP9_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    UMP9_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        UMP9_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            UMP9_HBC()
                        else
                            UMP9_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            UMP9_HB()
                        end
                    else
                        UMP9_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == K2 or CurrentWeapon == K2_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        K2_ASC()
                    else
                        K2_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            K2_AHBC()
                        else
                            K2_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            K2_AHB()
                        else
                            K2_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    K2_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        K2_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            K2_HBC()
                        else
                            K2_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            K2_HB()
                        end
                    else
                        K2_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == AKM or CurrentWeapon == AKM_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        AKM_ASC()
                    else
                        AKM_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            AKM_AHBC()
                        else
                            AKM_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            AKM_AHB()
                        else
                            AKM_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    AKM_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        AKM_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            AKM_HBC()
                        else
                            AKM_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            AKM_HB()
                        end
                    else
                        AKM_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == BERYL or CurrentWeapon == BERYL_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        BERRYL_ASC()
                    else
                        BERRYL_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            BERRYL_AHBC()
                        else
                            BERRYL_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            BERRYL_AHB()
                        else
                            BERRYL_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    BERRYL_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        BERRYL_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            BERRYL_HBC()
                        else
                            BERRYL_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            BERRYL_HB()
                        end
                    else
                        BERRYL_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == M416 or CurrentWeapon == M416_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        M416_ASC()
                    else
                        M416_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            M416_AHBC()
                        else
                            M416_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            M416_AHB()
                        else
                            M416_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    M416_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        M416_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            M416_HBC()
                        else
                            M416_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            M416_HB()
                        end
                    else
                        M416_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == SCAR_L or CurrentWeapon == SCAR_L_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        SCAR_L_ASC()
                    else
                        SCAR_L_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            SCAR_L_AHBC()
                        else
                            SCAR_L_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            SCAR_L_AHB()
                        else
                            SCAR_L_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    SCAR_L_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        SCAR_L_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            SCAR_L_HBC()
                        else
                            SCAR_L_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            SCAR_L_HB()
                        end
                    else
                        SCAR_L_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == GROZA or CurrentWeapon == GROZA_gk then
        if WeaponRecoil == true then
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    GROZA_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        GROZA_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            GROZA_HBC()
                        else
                            GROZA_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            GROZA_HB()
                        end
                    else
                        GROZA_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == AUG or CurrentWeapon == AUG_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        AUG_ASC()
                    else
                        AUG_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            AUG_AHBC()
                        else
                            AUG_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            AUG_AHB()
                        else
                            AUG_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    AUG_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        AUG_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            AUG_HBC()
                        else
                            AUG_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            AUG_HB()
                        end
                    else
                        AUG_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == BIZON or CurrentWeapon == BIZON_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        BIZON_ASC()
                    else
                        BIZON_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            BIZON_AHBC()
                        else
                            BIZON_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            BIZON_AHB()
                        else
                            BIZON_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    BIZON_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        BIZON_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            BIZON_HBC()
                        else
                            BIZON_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            BIZON_HB()
                        end
                    else
                        BIZON_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == MP5K or CurrentWeapon == MP5K_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        MP5_ASC()
                    else
                        MP5_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            MP5_AHBC()
                        else
                            MP5_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            MP5_AHB()
                        else
                            MP5_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    MP5_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        MP5_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            MP5_HBC()
                        else
                            MP5_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            MP5_HB()
                        end
                    else
                        MP5_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == G36C or CurrentWeapon == G36C_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        G36C_ASC()
                    else
                        G36C_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            G36C_AHBC()
                        else
                            G36C_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            G36C_AHB()
                        else
                            G36C_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    G36C_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        G36C_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            G36C_HBC()
                        else
                            G36C_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            G36C_HB()
                        end
                    else
                        G36C_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == MG3 or CurrentWeapon == MG3_gk then
        if WeaponRecoil == true then
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    MG3_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        MG3_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        MG3_BC()
                    else
                        MG3_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == M249 or CurrentWeapon == M249_gk then
        if WeaponRecoil == true then
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    M249_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        M249_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        M249_BC()
                    else
                        M249_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == M164A or CurrentWeapon == M164A_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        M164A_ASC()
                    else
                        M164A_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            M164A_AHBC()
                        else
                            M164A_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            M164A_AHB()
                        else
                            M164A_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    M164A_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        M164A_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            M164A_HBC()
                        else
                            M164A_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            M164A_HB()
                        end
                    else
                        M164A_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == MINI14 or CurrentWeapon == MINI14_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        MINI14_ASC()
                    else
                        MINI14_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            MINI14_AHBC()
                        else
                            MINI14_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            MINI14_AHB()
                        else
                            MINI14_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    MINI14_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        MINI14_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            MINI14_HBC()
                        else
                            MINI14_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            M164A_HB()
                        end
                    else
                        MINI14_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == MUTANT or CurrentWeapon == MUTANT_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        MUTANT_ASC()
                    else
                        MUTANT_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            MUTANT_AHBC()
                        else
                            MUTANT_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            MUTANT_AHB()
                        else
                            MUTANT_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    MUTANT_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        MUTANT_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            MUTANT_HBC()
                        else
                            MUTANT_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            MUTANT_HB()
                        end
                    else
                        MUTANT_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == ACE32 or CurrentWeapon == ACE32_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        ACE32_ASC()
                    else
                        ACE32_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            ACE32_AHBC()
                        else
                            ACE32_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            ACE32_AHB()
                        else
                            ACE32_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    ACE32_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        ACE32_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            ACE32_HBC()
                        else
                            ACE32_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            ACE32_HB()
                        end
                    else
                        ACE32_B()
                    end
                end
            end
        end
    elseif CurrentWeapon == FAMAS or CurrentWeapon == FAMAS_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        FAMAS_ASC()
                    else
                        FAMAS_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            FAMAS_AHBC()
                        else
                            FAMAS_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            FAMAS_AHB()
                        else
                            FAMAS_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    FAMAS_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        FAMAS_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            FAMAS_HBC()
                        else
                            FAMAS_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            FAMAS_HB()
                        end
                    else
                        FAMAS_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == P92_Handgun or CurrentWeapon == P92_Handgun_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        P92_Handgun_ASC()
                    else
                        P92_Handgun_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            P92_Handgun_AHBC()
                        else
                            P92_Handgun_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            P92_Handgun_AHB()
                        else
                            P92_Handgun_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    P92_Handgun_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        P92_Handgun_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            P92_Handgun_HBC()
                        else
                            P92_Handgun_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            P92_Handgun_HB()
                        end
                    else
                        P92_Handgun_B()
                    end
                end
            end
        end

    elseif CurrentWeapon == UZI or CurrentWeapon == UZI_gk then
        if WeaponRecoil == true then
            if IsKeyLockOn(AttachmentsMode) then
                if IsKeyLockOn(ScopeMode) then
                    if (IsModifierPressed(CrouchMode)) then
                        UZI_ASC()
                    else
                        UZI_AS()
                    end
                else
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            UZI_AHBC()
                        else
                            UZI_ABC()
                        end
                    else
                        if (IsModifierPressed(HoldBreathMode)) then
                            UZI_AHB()
                        else
                            UZI_AB()
                        end
                    end
                end
            end
            if (IsKeyLockOn(ScopeMode)) then
                if (IsModifierPressed(CrouchMode)) then
                    UZI_SC()
                else
                    if (IsKeyLockOn(ScopeMode)) then
                        UZI_S()
                    end
                end
            else
                if not (IsKeyLockOn(ScopeMode)) then
                    if (IsModifierPressed(CrouchMode)) then
                        if (IsModifierPressed(HoldBreathMode)) then
                            UZI_HBC()
                        else
                            UZI_BC()
                        end
                    elseif (IsModifierPressed(HoldBreathMode)) then
                        if not (IsModifierPressed(CrouchMode)) then
                            UZI_HB()
                        end
                    else
                        UZI_B()
                    end
                end
            end
        end
    end
end
