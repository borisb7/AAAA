local gPressedTime = 0
local shortPressThreshold = 300  

local full_mode = true
local full_mode_key = "Capslock"
local is_r_pressed = false
local right_click = 2

userInfo = {
    debug = 0,  -- Enable debugging
    cpuLoad = 2,
    sensitivity = { ADS = 90.1, scopeX2 = 1.3, scopeX3 = 2.1, scopeX4 = 3.9, scopeX6 = 2.3 },
    startControl = "G_bind",
    aimingSettings = "ctrlmode",
    customAimingSettings = {
        ADS = function() return false end,
    },
    G_bind = {
        ["G5"] = "M416|scopeX1", ["G5_LONG_PRESS"] = "M416|scopeX3",
        ["G4"] = "AKM|scopeX1", ["G4_LONG_PRESS"] = "AKM|scopeX3",
        ["lalt + G4"] = "Beryl|scopeX1", ["lalt + G4_LONG_PRESS"] = "Beryl|scopeX3",
        ["lalt + G5"] = "AUG|scopeX1", ["lalt + G5_LONG_PRESS"] = "AUG|scopeX3",
        ["lctrl + G5"] = "M249|scopeX1", ["lctrl + G5_LONG_PRESS"] = "M249|scopeX3",
        ["lctrl + G4"] = "ACE|scopeX1", ["lctrl + G4_LONG_PRESS"] = "ACE|scopeX2",
        ["ralt + G4"] = "Groza|scopeX1", ["ralt + G4_LONG_PRESS"] = "Groza|scopeX3",
        ["ralt + G5"] = "Famas|scopeX1", ["ralt + G5_LONG_PRESS"] = "Famas|scopeX3",
        ["rctrl + G5"] = "P90|scopeX1", ["rshift + G6"] = "fast_discard",
        ["rctrl + G4"] = "MG3|scopeX1", ["lctrl + G4_LONG_PRESS"] = "MG3|scopeX2",
        ["rctrl + G7"] = "MK14|scopeX1",["G7"] = "9mm", ["G8"] = "5.56",
        ["G6"] = "off", ["lalt + G7"] = "last", ["lalt + G8"] = "next", ["G9"] = ".45",
    },
}

pubg = {
    gun = {
        ["AUG"] = {"AUG_F", "AUG_B"}, ["M416"] = {"M416_F", "M416_B"},
        ["AKM"] = {"AKM_F", "AKM_B"}, ["Beryl"] = {"Beryl_F", "Beryl_B"}, 
        ["Famas"] = {"Famas_F", "Famas_B"}, ["P90"] = {"P90_F", "P90_B"},
        ["MG3"] = {"MG3_F", "MG3_B"}, ["M249"] = {"M249_F", "M249_B"},
		["Groza"] = {"Groza_F", "Groza_B"}, ["MK14"] = {"MK14_F", "MK14_B"},
		["7.62"] = {}, ["9mm"] = {}, ["5.56"] = {}, ["ACE"] = {"ACE_F", "ACE_B"},  
    },
    gunOptions = {
        ["AUG"] = {}, ["Famas"] = {}, ["P90"] = {}, ["MG3"] = {}, ["Beryl"] = {},
        ["9mm"] = {}, ["M416"] = {}, ["5.56"] = {}, ["AKM"] = {}, ["7.62"] = {},
		["M249"] = {}, ["Groza"] = {}, ["MK14"] = {}, ["ACE"] = {},
    },
    allCanUse = {}, allCanUse_index = 1, allCanUse_count = 0, bulletType = "", gunIndex = 1,
    counter = 0, xCounter = 0, sleep = userInfo.cpuLoad,
    startTime = 0, prevTime = 0, scopeX1 = 1,
    scopeX2 = userInfo.sensitivity.scopeX2, scopeX3 = userInfo.sensitivity.scopeX3,
    scopeX4 = userInfo.sensitivity.scopeX4, scopeX6 = userInfo.sensitivity.scopeX6,
    scope_current = "scopeX1", generalSensitivityRatio = userInfo.sensitivity.ADS / 100,
    isEffective = "2021-05-01 00:00:00", isStart = false, G1 = false,
    currentTime = 0, bulletIndex = 0, driftY = 0, crouchMode = false,
}

pubg.xLengthForDebug = pubg.generalSensitivityRatio * 60

pubg.renderDom = {
    switchTable = "",
    separator = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
    combo_key = "G-key",
    cmd = "cmd",
    autoLog = "No operational data yet.\n",
}

function pubg.isAimingState(mode)
    local switch = {
        ["ADS"] = function()
            if userInfo.aimingSettings == "recommend" then
                return IsMouseButtonPressed(3) and not IsModifierPressed("lalt")
            elseif userInfo.aimingSettings == "default" then
               
                return not IsModifierPressed("lshift") and not IsModifierPressed("lalt")
            elseif userInfo.aimingSettings == "ctrlmode" then
                return IsMouseButtonPressed(3) and not IsModifierPressed("lalt")
            elseif userInfo.aimingSettings == "custom" then
                return userInfo.customAimingSettings.ADS()
            end
        end,       
    }
    return switch[mode]()
end



pubg["AUG_F"] = function(gunName) -- AUG
    return pubg.execOptions(gunName, {
        interval = 8.5,
        Sleep = 0,
        ratio = 10,
        ballistic = {
                    {0, 40}, --20

            {1, 100}, --20
            {20, 20}, 
            {30, 22}, 
            {50, 22}, 
            {80, 25}, 
            {150, 26}, 
            {200, 28}, 
            {250, 29}, 
            {300, 29}, 
            {430, 28},
        },
        values = { 1, 2.3, 1.9, 1.35 }
    })
end


pubg["AUG_FS"] = function (gunName) --OLD NERFED1

    return pubg.execOptions(gunName, {
        ADS = 90.1,
        Sleep = 0,
        interval = 85,
	 ratio = 1,
        ballistic = {
            {1, 85},
            {2, 85},
            {4, 75},
            {10, 112},
            {15, 139},
            {25, 140},
            {30, 147},
            {42, 147},

        }, 
        values = { 1, 0.45, 0.38, 1.35 }
    })

end



pubg["AUG_FS"] = function (gunName) --OLD ANOTHER GOLD   --COMPENSATOR

    return pubg.execOptions(gunName, {
        interval = 85,
        ratio = 1,
        ballistic = {
            {1, 90},
            {2, 85},
            {4, 75},
            {10, 108},
            {15, 122}, --125  
            {25, 127}, --126
            {30, 129},  --127
            {42, 128}, --127
                }, 
        values = { 1, 0.83, 0.7, 1.36 }      
    })

end

pubg["AUG_B"] = function(gunName) --AUGNB  )))
    return pubg.execOptions(gunName, {
        interval = 8.2,
        Sleep = 0,
        ratio = 10,
        ballistic = {
            {1, 40}, --20
            {20, 18}, 
            {30, 18}, 
            {50, 20}, 
            {80, 25}, 
            {160, 31}, 
            {170, 35}, 
            {200, 35},             
            {300, 34},
            {430, 35},
        },
        values = { 1, 3.105, 2.5, 1.35 }
    })
end


pubg["AUG_BS"] = function(gunName) --AUGNB NOT EDITED
    return pubg.execOptions(gunName, {
        interval = 8.5,
        Sleep = 0,
        ratio = 10,
        ballistic = {
            {1, 25}, --20
            {20, 18}, 
            {30, 18}, 
            {50, 20}, 
            {80, 25}, 
            {150, 32}, 
            {200, 36}, 
            {250, 36}, 
            {300, 36}, 
            {430, 36},
        },
        values = { 1, 3.105, 2.5, 1.35 }
    })
end

pubg["AUG_BS"] = function(gunName) --AUGB ANOTHER V
    return pubg.execOptions(gunName, {
        interval = 8.5,
        Sleep = 0,
        ratio = 10,
        ballistic = {
            {1, 35}, --20
            {20, 18}, 
            {30, 18}, 
            {50, 20}, 
            {80, 25}, 
            {150, 31}, 
            {200, 35}, 
            {250, 35}, 
            {300, 35}, 
            {430, 35},
        },
        values = { 1, 3.205, 2.55, 1.35 }
    })
end

pubg["AUG_BS"] = function(gunName)     --OLD NOT SMOOTH
    return pubg.execOptions(gunName, {
        interval = 8,
        ratio = 10,
        ballistic = {
            {10, 110}, 
            {20, 75}, 
            {40, 70}, 
            {100, 118}, 
            {150, 155}, 
            {250, 166}, 
            {300, 166}, 
            {430, 169},
        },
        values = { 1, 0.628, 0.518, 1.35 }
    })
end

pubg["ACE_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 8.5,
                Sleep = 0,
        ratio = 10,
        ballistic = {
            {1, 42}, --20
            {20, 27}, 
            {30, 22}, 
            {50, 22}, 
            {80, 25}, 
            {150, 26}, 
            {200, 27}, 
            {250, 28}, 
            {300, 28}, 
            {430, 28},
        },
        values = { 1, 2.13, 1.678, 1.35 }
    })
end

pubg["ACE_B"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 8.5,
                        Sleep = 0,

        ratio = 10,
        ballistic = {
            {10, 140}, 
            {20, 110}, 
            {40, 110}, 
            {100, 140}, 
            {150, 140}, 
            {200, 171}, 
            {300, 181}, 
            {400, 182}, 
            {500, 182}, 
            {600, 182},
        },
        values = { 1, 0.615, 0.496, 1.35 }
    })
end






pubg["M416_F1"] = function(gunName)   --M416 NEW
    return pubg.execOptions(gunName, {
        interval = 8.5,
        Sleep = 0,
        ratio = 10,
        ballistic = {
            {1, 20}, --20
            {20, 20}, 
            {30, 20}, 
            {50, 20}, 
            {80, 23}, 
            {150, 23}, 
            {200, 26}, 
            {250, 26}, 
            {300, 26}, 
            {430, 26},
        },
        values = { 1, 2.1, 1.8, 1.35 }
    })
end


pubg["M416_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 8.5,
        Sleep = 0,
        ratio = 10,
        ballistic = {
            {1, 100}, --20
            {20, 20}, 
            {30, 22}, 
            {50, 22}, 
            {80, 25}, 
            {150, 26}, 
            {200, 27}, 
            {250, 28}, 
            {300, 28}, 
            {430, 28},
        },
        values = { 1, 2, 1.678, 1.35 }
    })
end



pubg["M416_Bі"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 8.5,
        ratio = 10,
        ballistic = {
            {10, 150}, 
            {20, 115}, 
            {40, 110}, 
            {100, 151}, 
            {150, 151}, 
            {200, 171}, 
            {300, 182}, 
            {400, 185}, 
            {500, 185}, 
            {600, 185},
        },
        values = { 1, 0.515, 0.396, 1.35 }
    })
end


pubg["M416_Bі"] = function(gunName) --AUGNB  )))
    return pubg.execOptions(gunName, {
        interval = 8.2,
        Sleep = 0,
        ratio = 10,
        ballistic = {
            {1, 40}, --20
            {20, 18}, 
            {30, 18}, 
            {50, 20}, 
            {80, 23}, 
            {160, 23}, 
            {170, 28}, 
            {200, 28},             
            {300, 28},
            {430, 28},
        },
        values = { 1, 3.105, 2.5, 1.35 }
    })
end


pubg["M416_B"] = function(gunName) --AUGNB  )))
    return pubg.execOptions(gunName, {
        interval = 8.2,
        Sleep = 0,
        ratio = 10,
        ballistic = {
            {1, 40}, --20
            {20, 17}, 
            {30, 17}, 
            {50, 19}, 
            {80, 23}, 
            {160, 25}, 
            {170, 26}, 
            {200, 30},             
            {300, 28},
            {430, 28},
        },
        values = { 1, 3.105, 2.4, 1.35 }
    })
end

pubg["AKM_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 9.9,
                Sleep = 0,

        ratio = 10,
        ballistic = {
            {10, 150}, 
            {20, 95}, --85
            {50, 106}, 
            {100, 118}, 
            {150, 134},  
            {250, 135}, 
            {350, 135}, 
            {420, 134},
        },                --0.75
        values = { 1, 0.601, 0.47, 1.35 }
    })
end

pubg["AKM_B1"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 99,
        ratio = 1,
        ballistic = {
            {1, 65}, 
            {2, 65}, 
            {5, 86}, 
            {10, 102}, 
            {15, 128}, 
            {25, 130}, 
            {35, 133}, 
            {42, 133},
        },
        values = { 1, 1.32, 0.97, 1.36 }
    })
end

pubg["AKM_B"] = function(gunName)
   return pubg.execOptions(gunName, {
        interval = 9.9,
                        Sleep = 0,

        ratio = 10,
        ballistic = {
            { 10, 110 },
            { 20, 95 },
            { 50, 98 },
            { 100, 118 },
            { 150, 141 },
            { 250, 143 },
            { 350, 141 },
            { 420, 141 },
        },
        values = { 1, 0.756, 0.579, 1.36 }
    })
end

pubg["Beryl_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 8.6,
                Sleep = 0,

        ratio = 10,
        ballistic = {
            {1, 40},
            {20, 40},
            {30, 40},
            {50, 35},
            {100, 38},
            {150, 40},
            {350, 46},
            {420, 47},
        },
        values = { 1, 1.672, 1.397, 1.34 }
    })
end

pubg["Beryl_F1"] = function(gunName)    --BERYL SMOOTH  
    return pubg.execOptions(gunName, {
        interval = 8.5,
        Sleep = 0,
        ratio = 10,
        ballistic = {
            {1, 100}, --20
            {20, 25}, 
            {30, 25}, 
            {50, 25}, 
            {80, 27}, 
            {150, 27}, 
            {200, 33}, 
            {250, 33}, 
            {300, 33}, 
            {430, 33},
        },
        values = { 1, 2.3, 1.9, 1.35 }
    })
end


pubg["Beryl_FS"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 8.6,
        ratio = 10,
        ballistic = {
            {1, 40},
            {20, 40},
            {30, 30},
            {50, 35},
            {100, 38},
            {150, 39},
            {200, 48},
            {300, 46},
            {420, 46},
        },
        values = { 1, 2.75, 2.29, 1.35 }
    })
end


pubg["Beryl_B"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 8.5,
                        Sleep = 0,

        ratio = 10,
        ballistic = {
            {1, 0},
            {20, 33},
            {30, 33},
            {50, 36},
            {100, 42},
            {150, 50},
            {200, 49},
            {250, 53},
            {300, 53},
            {350, 53},
            {420, 51},
        },
        values = { 1, 2.319, 1.955, 1.35 }
    })
end

pubg["M249_B"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 7.9,
                        Sleep = 0,

        ratio = 10,
        ballistic = {
            {10, 125},
            {20, 68},
            {50, 75},
            {100, 109},
            {400, 55},
            {750, 60},
            {1500, 65},
        },
        values = { 1, 0.61, 0.366, 1.35 }
    })
end


pubg["M249_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 7.9,
                Sleep = 0,

        ratio = 10,
        ballistic = {
            {10, 95},
            {20, 65},
            {50, 65},
            {100, 109},
            {200, 65},
                        {400, 55},

            {750, 60},
            {1500, 65},
        },
        values = { 1, 0.61, 0.366, 1.35 }
    })
end

pubg["Famas_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 8.5,
        ratio = 10,
        ballistic = {
            {10, 125},
            {20, 85},
            {40, 85},
            {100, 125},
            {150, 142},
            {250, 140},
            {300, 142},
            {420, 142},
        },
        values = { 1, 0.512, 0.427, 1.35 }       
    })
end

pubg["Famas_B"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 7.0,
        ratio = 10,
        ballistic = {
            {10, 19},
            {20, 19},
            {50, 18},
            {100, 26},
            {150, 37},
            {250, 35},
            {420, 31},
        },
        values = { 1, 2.295, 1.739, 1.35 }
    })
end

pubg["P90_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 5.9,
        ratio = 10,
        ballistic = {
            {10, 58},
            {20, 45},
            {40, 45},
            {80, 74},
            {150, 72},
            {170, 72},
            {200, 45},
            {250, 48},
            {400, 49},
            {500, 51},
        },
        values = { 1, 0.5, 0.439, 1.17 }
    })
end

pubg["P90_B"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 5.9,
        ratio = 10,
        ballistic = {
            {10, 58},
            {20, 55},
            {40, 55},
            {80, 74},
            {150, 79},
            {170, 76},
            {200, 48},
            {250, 48},
            {400, 49},
            {500, 51},
        },
        values = { 1, 0.744, 0.55, 1.35 }
    })
end

pubg["Groza_B"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 8.6,
        ratio = 10,
        ballistic = {
            {1, 10},
            {20, 40},
            {30, 30},
            {50, 35},
            {100, 40},
            {150, 45},
            {300, 52},
            {420, 53},
        },
        values = { 1, 1.678, 1.15, 1.35 }
    })
end

pubg["Groza_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 7.6,
        ratio = 10,
        ballistic = {
            {1, 10},
            {20, 30},
            {30, 30},
            {110, 33},
            {150, 43},
            {220, 46},
            {300, 45},
            {420, 45},
        },
        values = { 1, 1.678, 1.20, 1.35 }
    })
end

pubg["MG3_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 6.3,
        ratio = 10,
        ballistic = {
            {10, 65},
            {150, 55},
            {300, 85},
            {500, 75},
            {750, 75},
            {750, 75},
            {1150, 75},
        },
        values = { 1, 0.39, 0.158, 1.35 }
    })
end

pubg["MG3_B"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 6.3,
        ratio = 10,
        ballistic = {
            {1, 124},
            {10, 125},
            {40, 55},
            {100, 80},
            {200, 40},
            {250, 40},
            {400, 43},
            {500, 43},
            {750, 43},
        },
        values = { 1, 0.512, 0.274, 1.35 }
    })
end

pubg["MK14_F"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 7.9,
        ratio = 10,
        ballistic = {
            {10, 95},
            {20, 65},
            {50, 65},
            {100, 109},
            {400, 55},
            {750, 60},
            {1500, 65},
        },
        values = { 1, 1, 0.58, 1.35 }
    })
end

pubg["MK14_B"] = function(gunName)
    return pubg.execOptions(gunName, {
        interval = 7.9,
        ratio = 10,
        ballistic = {
            {10, 95},
            {20, 65},
            {50, 65},
            {100, 109},
            {400, 115},

        },
        values = { 1, 1.8, 1.28, 1.35 }
    })
end


function pubg.execOptions(gunName, options)
    local ballisticConfig1 = {}
    local ballisticConfig2 = {}
    local ballisticIndex = 1
    for i = 1, #options.ballistic do
        local nextCount = options.ballistic[i][1]
        if i ~= 1 then
            nextCount = options.ballistic[i][1] - options.ballistic[i - 1][1]
        end
        for j = 1, nextCount do
            ballisticConfig1[ballisticIndex] = options.ballistic[i][2] * pubg.generalSensitivityRatio
            ballisticIndex = ballisticIndex + 1
        end
    end
    for i = 1, #ballisticConfig1 do
        if i == 1 then
            ballisticConfig2[i] = ballisticConfig1[i]
        else
            ballisticConfig2[i] = ballisticConfig2[i - 1] + ballisticConfig1[i]
        end
    end
    return {
        duration = options.interval * #ballisticConfig2,
        amount = #ballisticConfig2,
        ADS = options.ADS,
        Sleep = options.Sleep,
        ratio = options.ratio,
        interval = options.interval,
        ballistic = ballisticConfig2,
        ctrlmodeRatio = options.values[3],
        ctrlmodeRatio1 = options.values[4],
        ctrlmodeRatio2 = options.values[2],
    }
end

-- Initialize the guns
function pubg.init()
    local forList = { "AUG", "M416", "M249", "Famas", "P90", "AKM", "Beryl", "Groza", "MG3", "MK14", "9mm", "5.56", "ACE", "7.62" }
    for _, type in ipairs(forList) do
        for _, gunName in ipairs(pubg.gun[type]) do
            local gunState = 1 -- Assuming all guns are in usable state
            pubg.gunOptions[type][#pubg.gunOptions[type] + 1] = pubg[gunName](gunName)
            pubg.gunOptions[type][#pubg.gunOptions[type]].autoContinuousFiring = ({ 0, 0, 1 })[math.max(1, math.min(gunState + 1, 3))]
            pubg.allCanUse_count = pubg.allCanUse_count + 1
            pubg.allCanUse[pubg.allCanUse_count] = gunName
            if pubg.bulletType == "" then
                pubg.bulletType = type
            end
        end
    end
end

function pubg.auto(options)
    pubg.currentTime = GetRunningTime()
    pubg.bulletIndex = math.ceil(((pubg.currentTime - pubg.startTime == 0 and { 1 } or { pubg.currentTime - pubg.startTime })[1]) / options.interval) + 1
    if pubg.bulletIndex > options.amount then
        return false
    end
    local d = (IsKeyLockOn("scrolllock") and { (pubg.bulletIndex - 1) * pubg.xLengthForDebug } or { 0 })[1]
    local x = math.ceil((pubg.currentTime - pubg.startTime) / (options.interval * options.ratio * (pubg.bulletIndex - 1)) * d) - pubg.xCounter
    local y = math.floor((pubg.currentTime - pubg.startTime) / (options.interval * options.ratio * (pubg.bulletIndex - 1)) * options.ballistic[pubg.bulletIndex]) - pubg.counter
    local realY = pubg.getRealY(options, y)
    MoveMouseRelative(x, realY)
    if options.autoContinuousFiring == 1 then
        PressAndReleaseMouseButton(1)
    end
    pubg.autoLog(options, y)
    pubg.xCounter = pubg.xCounter + x
    pubg.counter = pubg.counter + y
    pubg.autoSleep(IsKeyLockOn("scrolllock"))
end

function pubg.autoSleep(isTest, sleepVal)
    local sleepVal = pubg.gunOptions[pubg.bulletType][pubg.gunIndex].Sleep 
    Sleep(sleepVal or 4)
end

function pubg.getRealY(options, y)
    local realY = y
    if pubg.isAimingState("ADS") then
        realY = y * pubg[pubg.scope_current]
    end
    if userInfo.aimingSettings == "ctrlmode" then
        if is_r_pressed then
            if IsModifierPressed("lctrl") then
             --if pubg.bulletIndex <= 3 then
              --  realY = realY * options.ctrlmodeRatio * 2
           -- else
                realY = realY * options.ctrlmodeRatio
          --  end
                        else
                realY = realY * options.ctrlmodeRatio2
                            end

            if IsModifierPressed("lshift") then
                realY = realY * options.ctrlmodeRatio1
            end
        elseif IsModifierPressed("lshift") then
            realY = realY * options.ctrlmodeRatio2
        end
    end         

    -- Оновлений механізм округлення з накопиченням похибки
    local adjusted = realY + pubg.driftY
    local toMove = math.floor(adjusted)
    pubg.driftY = adjusted - toMove

    return toMove
end

function pubg.changeIsStart(isTrue)
    pubg.isStart = isTrue
end

function pubg.setBulletType(bulletType)
    pubg.bulletType = bulletType
    pubg.gunIndex = 1
    pubg.allCanUse_index = 0
    local forList = { "AUG", "M416", "M249", "Famas", "P90", "AKM", "Beryl", "Groza", "MG3", "MK14", "9mm", "5.56", "ACE", "7.62" }
    for i = 1, #forList do
        local type = forList[i]
        if type == bulletType then
            pubg.allCanUse_index = pubg.allCanUse_index + 1
            break
        else
            pubg.allCanUse_index = pubg.allCanUse_index + #pubg.gun[type]
        end
    end
    pubg.changeIsStart(true)
    OutputLogMessage("[LOG] Змінено тип патронів на: " .. bulletType .. "\n")
end

function pubg.setScope(scope)
    pubg.scope_current = scope
end

function pubg.setGun(gunName)
    local forList = { "AUG", "M416", "M249", "Famas", "P90", "AKM", "Beryl", "Groza", "MG3", "MK14", "9mm", "5.56", "ACE", "7.62" }
    local allCanUse_index = 0
    for _, type in ipairs(forList) do
        local gunIndex = 0
        local selected = false
        for _, gun in ipairs(pubg.gun[type]) do
            gunIndex = gunIndex + 1
            allCanUse_index = allCanUse_index + 1
            if gun == gunName then
                pubg.bulletType = type
                pubg.gunIndex = gunIndex
                pubg.allCanUse_index = allCanUse_index
                selected = true
                break
            end
        end
        if selected then break end
    end
    pubg.changeIsStart(true)
        OutputLogMessage("[LOG] Змінено зброю на: " .. gunName .. "\n")

end

function pubg.findInCanUse(cmd)
    if "first_in_canUse" == cmd then
        pubg.allCanUse_index = 1
    elseif "next_in_canUse" == cmd then
        if pubg.allCanUse_index < #pubg.allCanUse then
            pubg.allCanUse_index = pubg.allCanUse_index + 1
        end
    elseif "last_in_canUse" == cmd then
        pubg.allCanUse_index = #pubg.allCanUse
    end
    pubg.setGun(pubg.allCanUse[pubg.allCanUse_index])
end

function pubg.findInSeries(cmd)
    if "first" == cmd then
        pubg.gunIndex = 1
    elseif "next" == cmd then
        if pubg.gunIndex < #pubg.gun[pubg.bulletType] then
            pubg.gunIndex = pubg.gunIndex + 1
        end
    elseif "last" == cmd then
        pubg.gunIndex = #pubg.gun[pubg.bulletType]
    end
    pubg.setGun(pubg.gun[pubg.bulletType][pubg.gunIndex])
end

function pubg.runStatus()
    if userInfo.startControl == "capslock" then
        return IsKeyLockOn("capslock")
    elseif userInfo.startControl == "numlock" then
        return IsKeyLockOn("numlock")
    elseif userInfo.startControl == "G_bind" then
        return pubg.isStart
    end
end

function pubg.runCmd(cmd)
    if cmd == "" then cmd = "none" end
    local switch = {
        ["none"] = function() end,
        ["AUG"] = pubg.setBulletType, ["Famas"] = pubg.setBulletType,
        ["P90"] = pubg.setBulletType, ["MG3"] = pubg.setBulletType,
        ["Beryl"] = pubg.setBulletType, ["9mm"] = pubg.setBulletType,
        ["M416"] = pubg.setBulletType, ["5.56"] = pubg.setBulletType,
        ["AKM"] = pubg.setBulletType, ["7.62"] = pubg.setBulletType,
		["M249"] = pubg.setBulletType, ["Groza"] = pubg.setBulletType,
		["MK14"] = pubg.setBulletType, ["Groza"] = pubg.setBulletType,
		["ACE"] = pubg.setBulletType,

		
		["AUG_B"] = pubg.setGun, ["AUG_F"] = pubg.setGun,
        ["M416_B"] = pubg.setGun, ["M416_F"] = pubg.setGun,
		["M249_B"] = pubg.setGun, ["M249_F"] = pubg.setGun,
		["Famas_B"] = pubg.setGun, ["Famas_F"] = pubg.setGun,
		["P90_B"] = pubg.setGun, ["P90_F"] = pubg.setGun,
		["AKM_B"] = pubg.setGun, ["AKM_F"] = pubg.setGun,
		["Beryl_B"] = pubg.setGun, ["Beryl_F"] = pubg.setGun,
        ["Groza_B"] = pubg.setGun, ["Groza_F"] = pubg.setGun,
        ["MG3_B"] = pubg.setGun, ["MG3_F"] = pubg.setGun,
		["MK14_B"] = pubg.setGun, ["MK14_F"] = pubg.setGun,
		["ACE_B"] = pubg.setGun, ["ACE_F"] = pubg.setGun,

		
		["scopeX1"] = pubg.setScope, ["scopeX2"] = pubg.setScope,
        ["scopeX3"] = pubg.setScope, ["scopeX4"] = pubg.setScope,
        ["scopeX6"] = pubg.setScope, ["first"] = pubg.findInSeries, 
        ["next"] = pubg.findInSeries, ["last"] = pubg.findInSeries,
        ["first_in_canUse"] = pubg.findInCanUse, ["next_in_canUse"] = pubg.findInCanUse,
        ["last_in_canUse"] = pubg.findInCanUse, ["fast_pickup"] = pubg.fastPickup,
        ["fast_discard"] = pubg.fastDiscard, ["fast_lick_box"] = pubg.fastLickBox,
        ["off"] = function() pubg.changeIsStart(false) end,
    }
    if pubg.ok then
        local cmdGroup = string.split(cmd, '|')
        for _, _cmd in ipairs(cmdGroup) do
            if switch[_cmd] then switch[_cmd](_cmd) end
        end
    end
end

function pubg.outputLogRender()
    if userInfo.debug == 0 then return false end
    if not pubg.G1 then pubg.renderDom.switchTable = pubg.outputLogGunSwitchTable() end
    local resStr = table.concat({
        "\n>> [\"", pubg.renderDom.combo_key, "\"] = \"", pubg.renderDom.cmd, "\" <<\n",
        pubg.renderDom.separator, pubg.renderDom.switchTable,
        pubg.renderDom.separator, pubg.outputLogGunInfo(),
        pubg.renderDom.separator, pubg.renderDom.autoLog,
        pubg.renderDom.separator,
    })
    ClearLog()
    OutputLogMessage(resStr)
end

function pubg.outputLogGunSwitchTable()
    local resStr = "      canUse_i\t      series_i\t      Series\t      Gun Name\n\n"
    local allCount = 0
    for bulletType, guns in pairs(pubg.gun) do
        for i, gun in ipairs(guns) do
            allCount = allCount + 1
            local gunName = gun
            local tag = gunName == pubg.gun[pubg.bulletType][pubg.gunIndex] and "=> " or "      "
            resStr = table.concat({ resStr, tag, allCount, "\t", tag, i, "\t", tag, bulletType, "\t", tag, gunName, "\n" })
        end
    end
    return resStr
end

function pubg.outputLogGunInfo()
    local k = pubg.bulletType
    local i = pubg.gunIndex
    local gunName = pubg.gun[k][i]
    return table.concat({
        "Currently scope: [ " .. pubg.scope_current .. " ]\n",
        "Currently series: [ ", k, " ]\n",
        "Currently index in series: [ ", i, " / ", #pubg.gun[k], " ]\n",
        "Currently index in canUse: [ ", pubg.allCanUse_index, " / ", pubg.allCanUse_count, " ]\n",
        "Recoil table of [ ", gunName, " ]:\n",
        pubg.outputLogRecoilTable(),
    })
end

function pubg.outputLogRecoilTable()
    local k = pubg.bulletType
    local i = pubg.gunIndex
    local resStr = "{ "
    for j, num in ipairs(pubg.gunOptions[k][i].ballistic) do
        resStr = resStr .. num
        if j ~= #pubg.gunOptions[k][i].ballistic then resStr = resStr .. ", " end
    end
    resStr = resStr .. " }\n"
    return resStr
end

function pubg.autoLog(options, y)
    pubg.renderDom.autoLog = table.concat({
        "----------------------------------- Automatically counteracting gun recoil -----------------------------------\n",
        "------------------------------------------------------------------------------------------------------------------------------\n",
        "bullet index: ", pubg.bulletIndex, "    target counter: ", options.ballistic[pubg.bulletIndex], "    current counter: ", pubg.counter, "\n",
        "D-value(target - current): ", options.ballistic[pubg.bulletIndex], " - ", pubg.counter, " = ", options.ballistic[pubg.bulletIndex] - pubg.counter, "\n",
        "move: math.ceil((", pubg.currentTime, " - ", pubg.startTime, ") / (", options.interval, " * (", pubg.bulletIndex, " - 1)) * ", options.ballistic[pubg.bulletIndex], ") - ", pubg.counter, " = ", y, "\n",
        "------------------------------------------------------------------------------------------------------------------------------\n",
    })
end


function pubg.OnEvent_NoRecoil(event, arg, family)
    if (event == "MOUSE_BUTTON_PRESSED" and arg == right_click and not IsModifierPressed("lshift")) then
        is_r_pressed = true
    elseif (event == "MOUSE_BUTTON_RELEASED" and arg == right_click) then
        is_r_pressed = false
    end

    if (event == "MOUSE_BUTTON_PRESSED" and arg == 1 and not IsKeyLockOn(full_mode_key) ) then
        pubg.gunIndex = 2
    elseif IsKeyLockOn(full_mode_key) then
        pubg.gunIndex = 1
    end

    if event == "MOUSE_BUTTON_PRESSED" and arg == 1 and family == "mouse" and pubg.ok then
        if not pubg.runStatus() then
            return false
        end
        if userInfo.aimingSettings ~= "default" and not IsMouseButtonPressed(3) then
            pubg.PressOrRelaseAimKey(true)
        end
        if pubg.isAimingState("ADS") then
            pubg.startTime = GetRunningTime()
            pubg.G1 = true
            OutputLogMessage("Start Shooting....\n")
            pubg.shooting()
        end
    end

    if event == "MOUSE_BUTTON_RELEASED" and arg == 1 and family == "mouse" then
    pubg.driftY = 0

    Sleep(1)
        pubg.G1 = false
        pubg.counter = 0
        pubg.xCounter = 0
    end
end

function pubg.shooting()
        Sleep(1)
pubg.auto(pubg.gunOptions[pubg.bulletType][pubg.gunIndex])
    repeat
    
        pubg.auto(pubg.gunOptions[pubg.bulletType][pubg.gunIndex])
        if not IsMouseButtonPressed(1) then break end
    until not IsMouseButtonPressed(3)
        Sleep(1)

    OutputLogMessage("Stop Shooting....\n")
end

function pubg.modifierHandle(modifier)
    local cmd = userInfo.G_bind[modifier]
    pubg.renderDom.combo_key = modifier
    if cmd then
        pubg.renderDom.cmd = cmd
        pubg.runCmd(cmd)
    else
        pubg.renderDom.cmd = ""
    end
    pubg.outputLogRender()
end


function OnEvent(event, arg, family)
    if not pubg.ok then return false end

    pubg.OnEvent_NoRecoil(event, arg, family)

  if event == "MOUSE_BUTTON_PRESSED" and arg >= 3 and arg <= 11 and family == "mouse" and pubg.ok then
        local modifier = "G" .. arg
        for _, key in ipairs({ "lalt", "lctrl", "lshift", "ralt", "rctrl", "rshift" }) do
            if IsModifierPressed(key) then
                modifier = key .. " + " .. modifier
                break
            end
        end
        gPressedTime = GetRunningTime()
    elseif event == "MOUSE_BUTTON_RELEASED" and arg >= 3 and arg <= 11 and family == "mouse" and pubg.ok then
        local pressDuration = GetRunningTime() - gPressedTime
        local modifier = "G" .. arg
        for _, key in ipairs({ "lalt", "lctrl", "lshift", "ralt", "rctrl", "rshift" }) do
            if IsModifierPressed(key) then
                modifier = key .. " + " .. modifier
                break
            end
        end
        if pressDuration < shortPressThreshold then
            pubg.modifierHandle(modifier)
        else
            pubg.modifierHandle(modifier .. "_LONG_PRESS")
        end
    end


    if event == "PROFILE_DEACTIVATED" then
        EnablePrimaryMouseButtonEvents(false)
        ReleaseKey("lshift")
        ReleaseKey("lctrl")
        ReleaseKey("lalt")
        ReleaseKey("rshift")
        ReleaseKey("rctrl")
        ReleaseKey("ralt")
        ClearLog()
    end
end

function math.round(num, digit)
    local decimalPlaces = 100 ^ (digit or 0)
    return math.floor((num * decimalPlaces * 10 + 5) / 10) / decimalPlaces
end

function string.split(str, delimiter)
    local result = {}
    for match in (str .. delimiter):gmatch("(.-)" .. delimiter) do
        table.insert(result, match)
    end
    return result
end

function table.reduce(t, c)
    local res = c(t[1], t[2])
    for i = 3, #t do
        res = c(res, t[i])
    end
    return res
end

function table.map(t, c)
    local res = {}
    for i = 1, #t do
        res[i] = c(t[i], i)
    end
    return res
end

function table.forEach(t, c)
    for i = 1, #t do
        c(t[i], i)
    end
end

function table.print(val)
    local function loop(val, _indent)
        _indent = _indent or 1
        local indentStr = "    "
        local indent = string.rep(indentStr, _indent)
        local end_indent = string.rep(indentStr, _indent - 1)
        local putline = function(...) return table.concat({ ... }) end

        if type(val) == "table" then
            local res = "{ "
            for k, v in pairs(val) do
                res = res .. "\n" .. indent .. "[" .. tostring(k) .. "] = " .. loop(v, _indent + 1)
            end
            res = res .. "\n" .. end_indent .. "}, "
            return res
        elseif type(val) == "string" then
            return "\"" .. val .. "\", "
        elseif type(val) == "boolean" then
            return tostring(val) .. ", "
        else
            return tostring(val) .. ", "
        end
    end
    
    local res = loop(val)
    res = res:gsub(",%s*}", "}")
    res = res:gsub(",%s*$", "")
    res = res:gsub("{%s+}", "{}")
    return res
end

console = {}
function console.log(str)
    OutputLogMessage(table.print(str) .. "\n")
end

EnablePrimaryMouseButtonEvents(true)
pubg.GD = GetDate
pubg.ok = pubg.isEffective
pubg.init()
